{
  "labels": {
    "__end__": "395"
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "bank" }] },
    { "op": "Jump", "pc": "143" },
    { "op": "Frame", "name": "Bank", "args": "n" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "dict", "value": [{ "key": { "type": "int", "value": 0 }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "balance" }, "value": { "type": "int", "value": 0 } }] } }] } },
    { "op": "LoadVar", "value": "n" },
    { "op": "DelVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": "*" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "143" },
    { "op": "Frame", "name": "inquiry", "args": "(bank, acct)" },
    { "op": "DelVar", "value": "result" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "DelVar", "value": "bank" },
    { "op": "LoadVar", "value": "acct" },
    { "op": "DelVar", "value": "acct" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "143" },
    { "op": "Frame", "name": "deposit", "args": "(bank, acct, amount)" },
    { "op": "DelVar", "value": "result" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "DelVar", "value": "bank" },
    { "op": "LoadVar", "value": "acct" },
    { "op": "DelVar", "value": "acct" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "amount" },
    { "op": "DelVar", "value": "amount" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "143" },
    { "op": "Frame", "name": "withdraw", "args": "(bank, acct, amount)" },
    { "op": "DelVar", "value": "result" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "LoadVar", "value": "acct" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "amount" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "67", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "acct" },
    { "op": "DelVar", "value": "amount" },
    { "op": "DelVar", "value": "bank" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "82" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "DelVar", "value": "bank" },
    { "op": "LoadVar", "value": "acct" },
    { "op": "DelVar", "value": "acct" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "amount" },
    { "op": "DelVar", "value": "amount" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "143" },
    { "op": "Frame", "name": "transfer", "args": "(bank, acctFrom, acctTo, amount)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "acctFrom" },
    { "op": "LoadVar", "value": "acctTo" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "98", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "acctFrom" },
    { "op": "DelVar", "value": "acctTo" },
    { "op": "DelVar", "value": "amount" },
    { "op": "DelVar", "value": "bank" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "142" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "LoadVar", "value": "acctFrom" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "amount" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "115", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "acctFrom" },
    { "op": "DelVar", "value": "acctTo" },
    { "op": "DelVar", "value": "amount" },
    { "op": "DelVar", "value": "bank" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "141" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "LoadVar", "value": "acctFrom" },
    { "op": "DelVar", "value": "acctFrom" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "amount" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "bank" },
    { "op": "DelVar", "value": "bank" },
    { "op": "LoadVar", "value": "acctTo" },
    { "op": "DelVar", "value": "acctTo" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "atom", "value": "balance" } },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "amount" },
    { "op": "DelVar", "value": "amount" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "pc", "value": "4" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Apply" },
    { "op": "Store", "value": [{ "type": "atom", "value": "b" }] },
    { "op": "Jump", "pc": "299" },
    { "op": "Frame", "name": "inq_test", "args": "acc" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "call inquiry: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "Push", "value": { "type": "pc", "value": "13" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "b" }] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "acc" },
    { "op": "DelVar", "value": "acc" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "done inquiry: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Jump", "pc": "299" },
    { "op": "Frame", "name": "deposit_test", "args": "(acc, amount)" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "call deposit: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "Push", "value": { "type": "pc", "value": "13" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "b" }] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "acc" },
    { "op": "DelVar", "value": "acc" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "LoadVar", "value": "amount" },
    { "op": "DelVar", "value": "amount" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "done deposit: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Jump", "pc": "299" },
    { "op": "Frame", "name": "withdraw_test", "args": "(acc, amount)" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "call withdraw: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "Push", "value": { "type": "pc", "value": "49" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "b" }] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "acc" },
    { "op": "DelVar", "value": "acc" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "LoadVar", "value": "amount" },
    { "op": "DelVar", "value": "amount" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "done withdraw: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Jump", "pc": "299" },
    { "op": "Frame", "name": "transfer_test", "args": "(acctFrom, acctTo, amount)" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "call transfer: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "Push", "value": { "type": "pc", "value": "85" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "b" }] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "acctFrom" },
    { "op": "DelVar", "value": "acctFrom" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "LoadVar", "value": "acctTo" },
    { "op": "DelVar", "value": "acctTo" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 3 } },
    { "op": "LoadVar", "value": "amount" },
    { "op": "DelVar", "value": "amount" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Push", "value": { "type": "atom", "value": "done transfer: " } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "self" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Print" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }] } },
    { "op": "StoreVar", "value": "$s262" },
    { "op": "LoadVar", "value": "$s262" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "314", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s262", "value": "i" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }, { "type": "int", "value": 3 }, { "type": "int", "value": 4 }, { "type": "int", "value": 5 }] } },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Push", "value": { "type": "pc", "value": "148" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "301" },
    { "op": "DelVar", "value": "$s262" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }] } },
    { "op": "StoreVar", "value": "$s276" },
    { "op": "LoadVar", "value": "$s276" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "336", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s276", "value": "i" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }, { "type": "int", "value": 3 }, { "type": "int", "value": 4 }, { "type": "int", "value": 5 }] } },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Push", "value": { "type": "pc", "value": "182" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "317" },
    { "op": "DelVar", "value": "$s276" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }] } },
    { "op": "StoreVar", "value": "$s296" },
    { "op": "LoadVar", "value": "$s296" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "358", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s296", "value": "i" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }, { "type": "int", "value": 3 }, { "type": "int", "value": 4 }, { "type": "int", "value": 5 }] } },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Push", "value": { "type": "pc", "value": "220" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "339" },
    { "op": "DelVar", "value": "$s296" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }] } },
    { "op": "StoreVar", "value": "$s316" },
    { "op": "LoadVar", "value": "$s316" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "392", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s316", "value": "i" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }] } },
    { "op": "StoreVar", "value": "$s322" },
    { "op": "LoadVar", "value": "$s322" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "389", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s322", "value": "j" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }, { "type": "int", "value": 3 }, { "type": "int", "value": 4 }, { "type": "int", "value": 5 }] } },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Push", "value": { "type": "pc", "value": "258" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "j" },
    { "op": "DelVar", "value": "j" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Load", "value": [{ "type": "atom", "value": "amount" }] },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "367" },
    { "op": "DelVar", "value": "$s322" },
    { "op": "DelVar", "value": "i" },
    { "op": "Jump", "pc": "361" },
    { "op": "DelVar", "value": "$s316" },
    { "op": "Return" },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__ ()","start of method __init__"],
    ["Push ()","push constant ()"],
    ["Store bank","pop a value and store it in shared variable bank"],
    ["Jump 143","set program counter to 143"],
    ["Frame Bank n","start of method Bank"],
    ["DelVar result","delete method variable result"],
    ["Push [{ \"balance\":0 }]","push constant [{ \"balance\":0 }]"],
    ["LoadVar n","push the value of n"],
    ["DelVar n","delete method variable n"],
    ["2-ary *","pop 2 values and push the result of applying *"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 143","set program counter to 143"],
    ["Frame inquiry (bank, acct)","start of method inquiry"],
    ["DelVar result","delete method variable result"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar bank","push the value of bank"],
    ["DelVar bank","delete method variable bank"],
    ["LoadVar acct","push the value of acct"],
    ["DelVar acct","delete method variable acct"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 143","set program counter to 143"],
    ["Frame deposit (bank, acct, amount)","start of method deposit"],
    ["DelVar result","delete method variable result"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar bank","push the value of bank"],
    ["DelVar bank","delete method variable bank"],
    ["LoadVar acct","push the value of acct"],
    ["DelVar acct","delete method variable acct"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar amount","push the value of amount"],
    ["DelVar amount","delete method variable amount"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push True","push constant True"],
    ["StoreVar result","pop a value and store in result"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 143","set program counter to 143"],
    ["Frame withdraw (bank, acct, amount)","start of method withdraw"],
    ["DelVar result","delete method variable result"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar bank","push the value of bank"],
    ["LoadVar acct","push the value of acct"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar amount","push the value of amount"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 67","pop a value and jump to 67 if the value is False"],
    ["DelVar acct","delete method variable acct"],
    ["DelVar amount","delete method variable amount"],
    ["DelVar bank","delete method variable bank"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 82","set program counter to 82"],
    ["LoadVar bank","push the value of bank"],
    ["DelVar bank","delete method variable bank"],
    ["LoadVar acct","push the value of acct"],
    ["DelVar acct","delete method variable acct"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar amount","push the value of amount"],
    ["DelVar amount","delete method variable amount"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push True","push constant True"],
    ["StoreVar result","pop a value and store in result"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 143","set program counter to 143"],
    ["Frame transfer (bank, acctFrom, acctTo, amount)","start of method transfer"],
    ["DelVar result","delete method variable result"],
    ["LoadVar acctFrom","push the value of acctFrom"],
    ["LoadVar acctTo","push the value of acctTo"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 98","pop a value and jump to 98 if the value is False"],
    ["DelVar acctFrom","delete method variable acctFrom"],
    ["DelVar acctTo","delete method variable acctTo"],
    ["DelVar amount","delete method variable amount"],
    ["DelVar bank","delete method variable bank"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 142","set program counter to 142"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar bank","push the value of bank"],
    ["LoadVar acctFrom","push the value of acctFrom"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar amount","push the value of amount"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 115","pop a value and jump to 115 if the value is False"],
    ["DelVar acctFrom","delete method variable acctFrom"],
    ["DelVar acctTo","delete method variable acctTo"],
    ["DelVar amount","delete method variable amount"],
    ["DelVar bank","delete method variable bank"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 141","set program counter to 141"],
    ["LoadVar bank","push the value of bank"],
    ["LoadVar acctFrom","push the value of acctFrom"],
    ["DelVar acctFrom","delete method variable acctFrom"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar amount","push the value of amount"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar bank","push the value of bank"],
    ["DelVar bank","delete method variable bank"],
    ["LoadVar acctTo","push the value of acctTo"],
    ["DelVar acctTo","delete method variable acctTo"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push \"balance\"","push constant \"balance\""],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar amount","push the value of amount"],
    ["DelVar amount","delete method variable amount"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push True","push constant True"],
    ["StoreVar result","pop a value and store in result"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Push PC(4)","push constant PC(4)"],
    ["Push ()","push constant ()"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store b","pop a value and store it in shared variable b"],
    ["Jump 299","set program counter to 299"],
    ["Frame inq_test acc","start of method inq_test"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"call inquiry: \"","push constant \"call inquiry: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(13)","push constant PC(13)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push ?b","push constant ?b"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar acc","push the value of acc"],
    ["DelVar acc","delete method variable acc"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"done inquiry: \"","push constant \"done inquiry: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Jump 299","set program counter to 299"],
    ["Frame deposit_test (acc, amount)","start of method deposit_test"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"call deposit: \"","push constant \"call deposit: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(13)","push constant PC(13)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push ?b","push constant ?b"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar acc","push the value of acc"],
    ["DelVar acc","delete method variable acc"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["LoadVar amount","push the value of amount"],
    ["DelVar amount","delete method variable amount"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"done deposit: \"","push constant \"done deposit: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Jump 299","set program counter to 299"],
    ["Frame withdraw_test (acc, amount)","start of method withdraw_test"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"call withdraw: \"","push constant \"call withdraw: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(49)","push constant PC(49)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push ?b","push constant ?b"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar acc","push the value of acc"],
    ["DelVar acc","delete method variable acc"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["LoadVar amount","push the value of amount"],
    ["DelVar amount","delete method variable amount"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"done withdraw: \"","push constant \"done withdraw: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Jump 299","set program counter to 299"],
    ["Frame transfer_test (acctFrom, acctTo, amount)","start of method transfer_test"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"call transfer: \"","push constant \"call transfer: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(85)","push constant PC(85)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push ?b","push constant ?b"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar acctFrom","push the value of acctFrom"],
    ["DelVar acctFrom","delete method variable acctFrom"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["LoadVar acctTo","push the value of acctTo"],
    ["DelVar acctTo","delete method variable acctTo"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 3","push constant 3"],
    ["LoadVar amount","push the value of amount"],
    ["DelVar amount","delete method variable amount"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push \"done transfer: \"","push constant \"done transfer: \""],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load self","push value of shared variable self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Print","pop a value and add to print history"],
    ["Return","restore caller method state and push result"],
    ["Push { 1 }","push constant { 1 }"],
    ["StoreVar $s262","pop a value and store in $s262"],
    ["LoadVar $s262","push the value of $s262"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 314","pop a value and jump to 314 if the value is True"],
    ["Cut($s262, i)","remove smallest element from $s262 and assign to i"],
    ["Push { 1, 2, 3, 4, 5 }","push constant { 1, 2, 3, 4, 5 }"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store amount","pop a value and store it in shared variable amount"],
    ["Push PC(148)","push constant PC(148)"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 301","set program counter to 301"],
    ["DelVar $s262","delete method variable $s262"],
    ["Push { 1, 2 }","push constant { 1, 2 }"],
    ["StoreVar $s276","pop a value and store in $s276"],
    ["LoadVar $s276","push the value of $s276"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 336","pop a value and jump to 336 if the value is True"],
    ["Cut($s276, i)","remove smallest element from $s276 and assign to i"],
    ["Push { 1, 2, 3, 4, 5 }","push constant { 1, 2, 3, 4, 5 }"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store amount","pop a value and store it in shared variable amount"],
    ["Push PC(182)","push constant PC(182)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load amount","push value of shared variable amount"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 317","set program counter to 317"],
    ["DelVar $s276","delete method variable $s276"],
    ["Push { 1 }","push constant { 1 }"],
    ["StoreVar $s296","pop a value and store in $s296"],
    ["LoadVar $s296","push the value of $s296"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 358","pop a value and jump to 358 if the value is True"],
    ["Cut($s296, i)","remove smallest element from $s296 and assign to i"],
    ["Push { 1, 2, 3, 4, 5 }","push constant { 1, 2, 3, 4, 5 }"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store amount","pop a value and store it in shared variable amount"],
    ["Push PC(220)","push constant PC(220)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Load amount","push value of shared variable amount"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 339","set program counter to 339"],
    ["DelVar $s296","delete method variable $s296"],
    ["Push { 1, 2 }","push constant { 1, 2 }"],
    ["StoreVar $s316","pop a value and store in $s316"],
    ["LoadVar $s316","push the value of $s316"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 392","pop a value and jump to 392 if the value is True"],
    ["Cut($s316, i)","remove smallest element from $s316 and assign to i"],
    ["Push { 1, 2 }","push constant { 1, 2 }"],
    ["StoreVar $s322","pop a value and store in $s322"],
    ["LoadVar $s322","push the value of $s322"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 389","pop a value and jump to 389 if the value is True"],
    ["Cut($s322, j)","remove smallest element from $s322 and assign to j"],
    ["Push { 1, 2, 3, 4, 5 }","push constant { 1, 2, 3, 4, 5 }"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store amount","pop a value and store it in shared variable amount"],
    ["Push PC(258)","push constant PC(258)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar i","push the value of i"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar j","push the value of j"],
    ["DelVar j","delete method variable j"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["Load amount","push value of shared variable amount"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 367","set program counter to 367"],
    ["DelVar $s322","delete method variable $s322"],
    ["DelVar i","delete method variable i"],
    ["Jump 361","set program counter to 361"],
    ["DelVar $s316","delete method variable $s316"],
    ["Return","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locations": {
    "3": { "file": "bank.hny", "line": "1", "code": "def Bank(n):" },
    "4": { "file": "bank.hny", "line": "1", "code": "def Bank(n):" },
    "5": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "6": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "7": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "8": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "9": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "10": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "11": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "12": { "file": "bank.hny", "line": "4", "code": "def inquiry(bank, acct):" },
    "13": { "file": "bank.hny", "line": "4", "code": "def inquiry(bank, acct):" },
    "14": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "15": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "16": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "17": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "18": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "19": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "20": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "21": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "22": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "23": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "24": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "25": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "26": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "27": { "file": "bank.hny", "line": "7", "code": "def deposit(bank, acct, amount):" },
    "28": { "file": "bank.hny", "line": "7", "code": "def deposit(bank, acct, amount):" },
    "29": { "file": "bank.hny", "line": "8", "code": "    atomically:" },
    "30": { "file": "bank.hny", "line": "8", "code": "    atomically:" },
    "31": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "32": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "33": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "34": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "35": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "36": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "37": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "38": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "39": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "40": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "41": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "42": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "43": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "44": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "45": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "46": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "47": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "48": { "file": "bank.hny", "line": "12", "code": "def withdraw(bank, acct, amount):" },
    "49": { "file": "bank.hny", "line": "12", "code": "def withdraw(bank, acct, amount):" },
    "50": { "file": "bank.hny", "line": "13", "code": "    atomically:" },
    "51": { "file": "bank.hny", "line": "13", "code": "    atomically:" },
    "52": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "53": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "54": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "55": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "56": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "57": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "58": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "59": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "60": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "61": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "62": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "63": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "64": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "65": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "66": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "67": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "68": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "69": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "70": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "71": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "72": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "73": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "74": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "75": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "76": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "77": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "78": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "79": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "80": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "81": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "82": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "83": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "84": { "file": "bank.hny", "line": "20", "code": "def transfer(bank, acctFrom, acctTo, amount):" },
    "85": { "file": "bank.hny", "line": "20", "code": "def transfer(bank, acctFrom, acctTo, amount):" },
    "86": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "87": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "88": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "89": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "90": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "91": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "92": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "93": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "94": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "95": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "96": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "97": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "98": { "file": "bank.hny", "line": "24", "code": "        atomically:" },
    "99": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "100": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "101": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "102": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "103": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "104": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "105": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "106": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "107": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "108": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "109": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "110": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "111": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "112": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "113": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "114": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "115": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "116": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "117": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "118": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "119": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "120": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "121": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "122": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "123": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "124": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "125": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "126": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "127": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "128": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "129": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "130": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "131": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "132": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "133": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "134": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "135": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "136": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "137": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "138": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "139": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "140": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "141": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "142": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "143": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "144": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "145": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "146": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "147": { "file": "banktest.hny", "line": "10", "code": "def inq_test(acc):" },
    "148": { "file": "banktest.hny", "line": "10", "code": "def inq_test(acc):" },
    "149": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "150": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "151": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "152": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "153": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "154": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "155": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "156": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "157": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "158": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "159": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "160": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "161": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "162": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "163": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "164": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "165": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "166": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "167": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "168": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "169": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "170": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "171": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "172": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "173": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "174": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "175": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "176": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "177": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "178": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "179": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "180": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "181": { "file": "banktest.hny", "line": "15", "code": "def deposit_test(acc, amount):" },
    "182": { "file": "banktest.hny", "line": "15", "code": "def deposit_test(acc, amount):" },
    "183": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "184": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "185": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "186": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "187": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "188": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "189": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "190": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "191": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "192": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "193": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "194": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "195": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "196": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "197": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "198": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "199": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "200": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "201": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "202": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "203": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "204": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "205": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "206": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "207": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "208": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "209": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "210": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "211": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "212": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "213": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "214": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "215": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "216": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "217": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "218": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "219": { "file": "banktest.hny", "line": "20", "code": "def withdraw_test(acc, amount):" },
    "220": { "file": "banktest.hny", "line": "20", "code": "def withdraw_test(acc, amount):" },
    "221": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "222": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "223": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "224": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "225": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "226": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "227": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "228": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "229": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "230": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "231": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "232": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "233": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "234": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "235": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "236": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "237": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "238": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "239": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "240": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "241": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "242": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "243": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "244": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "245": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "246": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "247": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "248": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "249": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "250": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "251": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "252": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "253": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "254": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "255": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "256": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "257": { "file": "banktest.hny", "line": "25", "code": "def transfer_test(acctFrom, acctTo, amount):" },
    "258": { "file": "banktest.hny", "line": "25", "code": "def transfer_test(acctFrom, acctTo, amount):" },
    "259": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "260": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "261": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "262": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "263": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "264": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "265": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "266": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "267": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "268": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "269": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "270": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "271": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "272": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "273": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "274": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "275": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "276": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "277": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "278": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "279": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "280": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "281": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "282": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "283": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "284": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "285": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "286": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "287": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "288": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "289": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "290": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "291": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "292": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "293": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "294": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "295": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "296": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "297": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "298": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "299": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "300": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "301": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "302": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "303": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "304": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "305": { "file": "banktest.hny", "line": "31", "code": "    amount = choose {1..5}" },
    "306": { "file": "banktest.hny", "line": "31", "code": "    amount = choose {1..5}" },
    "307": { "file": "banktest.hny", "line": "31", "code": "    amount = choose {1..5}" },
    "308": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "309": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "310": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "311": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "312": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "313": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "314": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "315": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "316": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "317": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "318": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "319": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "320": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "321": { "file": "banktest.hny", "line": "35", "code": "    amount = choose {1..5}" },
    "322": { "file": "banktest.hny", "line": "35", "code": "    amount = choose {1..5}" },
    "323": { "file": "banktest.hny", "line": "35", "code": "    amount = choose {1..5}" },
    "324": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "325": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "326": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "327": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "328": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "329": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "330": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "331": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "332": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "333": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "334": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "335": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "336": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "337": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "338": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "339": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "340": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "341": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "342": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "343": { "file": "banktest.hny", "line": "39", "code": "    amount = choose {1..5}" },
    "344": { "file": "banktest.hny", "line": "39", "code": "    amount = choose {1..5}" },
    "345": { "file": "banktest.hny", "line": "39", "code": "    amount = choose {1..5}" },
    "346": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "347": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "348": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "349": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "350": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "351": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "352": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "353": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "354": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "355": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "356": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "357": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "358": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "359": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "360": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "361": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "362": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "363": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "364": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "365": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "366": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "367": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "368": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "369": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "370": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "371": { "file": "banktest.hny", "line": "44", "code": "        amount = choose {1..5}" },
    "372": { "file": "banktest.hny", "line": "44", "code": "        amount = choose {1..5}" },
    "373": { "file": "banktest.hny", "line": "44", "code": "        amount = choose {1..5}" },
    "374": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "375": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "376": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "377": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "378": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "379": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "380": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "381": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "382": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "383": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "384": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "385": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "386": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "387": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "388": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "389": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "390": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "391": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "392": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "393": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "394": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" }
  }
}
