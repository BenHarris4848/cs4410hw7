{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "xhash": "1d1ce474167",
      "name": "__init__()",
      "microsteps": [
        {
          "shared": { },
          "npc": "1",
          "fp": "4",
          "trace": [
            {
              "pc": "1",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "0"
        },
        {
          "npc": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1"
        },
        {
          "shared": { "bank": { "type": "dict", "value": [] } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },
        {
          "npc": "143",
          "push": [ ],
          "pc": "3"
        },
        {
          "npc": "144",
          "push": [ { "type": "pc", "value": "4" } ],
          "pc": "143"
        },
        {
          "npc": "145",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "144"
        },
        {
          "npc": "4",
          "pop": "2",
          "push": [ { "type": "pc", "value": "146" }, { "type": "int", "value": "2" }, { "type": "dict", "value": [] } ],
          "pc": "145"
        },
        {
          "npc": "5",
          "fp": "9",
          "trace": [
            {
              "pc": "146",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "5",
              "xpc": "4",
              "method": "Bank()",
              "calltype": "normal",
              "vars": { "n": { "type": "dict", "value": [] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "n": { "type": "dict", "value": [] }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "4" } ],
          "pc": "4"
        },
        {
          "npc": "6",
          "local": { "n": { "type": "dict", "value": [] } },
          "push": [ ],
          "pc": "5"
        },
        {
          "npc": "7",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "balance" }, "value": { "type": "int", "value": "0" } } ] } } ] } ],
          "pc": "6"
        },
        {
          "npc": "8",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "7"
        },
        {
          "npc": "9",
          "local": { },
          "push": [ ],
          "pc": "8"
        },
        {
          "npc": "9",
          "failure": "* can only have at most one list or string",
          "mode": "failed",
          "pop": "2",
          "push": [ ],
          "pc": "9"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1d1ce474dc7",
          "name": "__init__()",
          "entry": "0",
          "pc": "9",
          "fp": "9",
          "trace": [
            {
              "pc": "146",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "9",
              "xpc": "4",
              "method": "Bank()",
              "calltype": "normal",
              "vars": { }
            }
          ],
          "failure": "* can only have at most one list or string",
          "atomic": "1",
          "mode": "failed",
          "this": { "type": "dict", "value": [] }
        }
      ]
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Push ()",
    "Store bank",
    "Jump 143",
    "Frame Bank n",
    "DelVar result",
    "Push [{ \"balance\":0 }]",
    "LoadVar n",
    "DelVar n",
    "2-ary *",
    "StoreVar result",
    "Return",
    "Jump 143",
    "Frame inquiry (bank, acct)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acct",
    "DelVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Load",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 143",
    "Frame deposit (bank, acct, amount)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acct",
    "DelVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "DelVar amount",
    "2-ary +",
    "Store",
    "Push True",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 143",
    "Frame withdraw (bank, acct, amount)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "LoadVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Load",
    "LoadVar amount",
    "2-ary <",
    "JumpCond False 67",
    "DelVar acct",
    "DelVar amount",
    "DelVar bank",
    "Push False",
    "StoreVar result",
    "Jump 82",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acct",
    "DelVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "DelVar amount",
    "2-ary -",
    "Store",
    "Push True",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 143",
    "Frame transfer (bank, acctFrom, acctTo, amount)",
    "DelVar result",
    "LoadVar acctFrom",
    "LoadVar acctTo",
    "2-ary ==",
    "JumpCond False 98",
    "DelVar acctFrom",
    "DelVar acctTo",
    "DelVar amount",
    "DelVar bank",
    "Push False",
    "StoreVar result",
    "Jump 142",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "LoadVar acctFrom",
    "Address",
    "Push \"balance\"",
    "Address",
    "Load",
    "LoadVar amount",
    "2-ary <",
    "JumpCond False 115",
    "DelVar acctFrom",
    "DelVar acctTo",
    "DelVar amount",
    "DelVar bank",
    "Push False",
    "StoreVar result",
    "Jump 141",
    "LoadVar bank",
    "LoadVar acctFrom",
    "DelVar acctFrom",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "2-ary -",
    "Store",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acctTo",
    "DelVar acctTo",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "DelVar amount",
    "2-ary +",
    "Store",
    "Push True",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Push PC(4)",
    "Push ()",
    "Apply",
    "Store b",
    "Jump 299",
    "Frame inq_test acc",
    "Push ()",
    "Push 0",
    "Push \"call inquiry: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(13)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acc",
    "DelVar acc",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done inquiry: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 299",
    "Frame deposit_test (acc, amount)",
    "Push ()",
    "Push 0",
    "Push \"call deposit: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(13)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acc",
    "DelVar acc",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar amount",
    "DelVar amount",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done deposit: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 299",
    "Frame withdraw_test (acc, amount)",
    "Push ()",
    "Push 0",
    "Push \"call withdraw: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(49)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acc",
    "DelVar acc",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar amount",
    "DelVar amount",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done withdraw: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 299",
    "Frame transfer_test (acctFrom, acctTo, amount)",
    "Push ()",
    "Push 0",
    "Push \"call transfer: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(85)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acctFrom",
    "DelVar acctFrom",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar acctTo",
    "DelVar acctTo",
    "3-ary DictAdd",
    "Push 3",
    "LoadVar amount",
    "DelVar amount",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done transfer: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Push { 1 }",
    "StoreVar $s262",
    "LoadVar $s262",
    "1-ary IsEmpty",
    "JumpCond True 314",
    "Cut($s262, i)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(148)",
    "LoadVar i",
    "DelVar i",
    "Push ()",
    "Spawn",
    "Jump 301",
    "DelVar $s262",
    "Push { 1, 2 }",
    "StoreVar $s276",
    "LoadVar $s276",
    "1-ary IsEmpty",
    "JumpCond True 336",
    "Cut($s276, i)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(182)",
    "Push ()",
    "Push 0",
    "LoadVar i",
    "DelVar i",
    "3-ary DictAdd",
    "Push 1",
    "Load amount",
    "3-ary DictAdd",
    "Push ()",
    "Spawn",
    "Jump 317",
    "DelVar $s276",
    "Push { 1 }",
    "StoreVar $s296",
    "LoadVar $s296",
    "1-ary IsEmpty",
    "JumpCond True 358",
    "Cut($s296, i)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(220)",
    "Push ()",
    "Push 0",
    "LoadVar i",
    "DelVar i",
    "3-ary DictAdd",
    "Push 1",
    "Load amount",
    "3-ary DictAdd",
    "Push ()",
    "Spawn",
    "Jump 339",
    "DelVar $s296",
    "Push { 1, 2 }",
    "StoreVar $s316",
    "LoadVar $s316",
    "1-ary IsEmpty",
    "JumpCond True 392",
    "Cut($s316, i)",
    "Push { 1, 2 }",
    "StoreVar $s322",
    "LoadVar $s322",
    "1-ary IsEmpty",
    "JumpCond True 389",
    "Cut($s322, j)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(258)",
    "Push ()",
    "Push 0",
    "LoadVar i",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar j",
    "DelVar j",
    "3-ary DictAdd",
    "Push 2",
    "Load amount",
    "3-ary DictAdd",
    "Push ()",
    "Spawn",
    "Jump 367",
    "DelVar $s322",
    "DelVar i",
    "Jump 361",
    "DelVar $s316",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "push constant ()",
    "pop a value and store it in shared variable bank",
    "set program counter to 143",
    "start of method Bank",
    "delete method variable result",
    "push constant [{ \"balance\":0 }]",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying *",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method inquiry",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acct",
    "delete method variable acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method deposit",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acct",
    "delete method variable acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "delete method variable amount",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method withdraw",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "push the value of acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of amount",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 67 if the value is False",
    "delete method variable acct",
    "delete method variable amount",
    "delete method variable bank",
    "push constant False",
    "pop a value and store in result",
    "set program counter to 82",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acct",
    "delete method variable acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "delete method variable amount",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method transfer",
    "delete method variable result",
    "push the value of acctFrom",
    "push the value of acctTo",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 98 if the value is False",
    "delete method variable acctFrom",
    "delete method variable acctTo",
    "delete method variable amount",
    "delete method variable bank",
    "push constant False",
    "pop a value and store in result",
    "set program counter to 142",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "push the value of acctFrom",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of amount",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 115 if the value is False",
    "delete method variable acctFrom",
    "delete method variable acctTo",
    "delete method variable amount",
    "delete method variable bank",
    "push constant False",
    "pop a value and store in result",
    "set program counter to 141",
    "push the value of bank",
    "push the value of acctFrom",
    "delete method variable acctFrom",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acctTo",
    "delete method variable acctTo",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "delete method variable amount",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "push constant PC(4)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable b",
    "set program counter to 299",
    "start of method inq_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call inquiry: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(13)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acc",
    "delete method variable acc",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done inquiry: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 299",
    "start of method deposit_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call deposit: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(13)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acc",
    "delete method variable acc",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of amount",
    "delete method variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done deposit: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 299",
    "start of method withdraw_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call withdraw: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(49)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acc",
    "delete method variable acc",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of amount",
    "delete method variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done withdraw: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 299",
    "start of method transfer_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call transfer: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(85)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acctFrom",
    "delete method variable acctFrom",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of acctTo",
    "delete method variable acctTo",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 3",
    "push the value of amount",
    "delete method variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done transfer: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "push constant { 1 }",
    "pop a value and store in $s262",
    "push the value of $s262",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 314 if the value is True",
    "remove smallest element from $s262 and assign to i",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(148)",
    "push the value of i",
    "delete method variable i",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 301",
    "delete method variable $s262",
    "push constant { 1, 2 }",
    "pop a value and store in $s276",
    "push the value of $s276",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 336 if the value is True",
    "remove smallest element from $s276 and assign to i",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(182)",
    "push constant ()",
    "push constant 0",
    "push the value of i",
    "delete method variable i",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 317",
    "delete method variable $s276",
    "push constant { 1 }",
    "pop a value and store in $s296",
    "push the value of $s296",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 358 if the value is True",
    "remove smallest element from $s296 and assign to i",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(220)",
    "push constant ()",
    "push constant 0",
    "push the value of i",
    "delete method variable i",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 339",
    "delete method variable $s296",
    "push constant { 1, 2 }",
    "pop a value and store in $s316",
    "push the value of $s316",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 392 if the value is True",
    "remove smallest element from $s316 and assign to i",
    "push constant { 1, 2 }",
    "pop a value and store in $s322",
    "push the value of $s322",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 389 if the value is True",
    "remove smallest element from $s322 and assign to j",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(258)",
    "push constant ()",
    "push constant 0",
    "push the value of i",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of j",
    "delete method variable j",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push value of shared variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 367",
    "delete method variable $s322",
    "delete method variable i",
    "set program counter to 361",
    "delete method variable $s316",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "115": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "209": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "193": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "72": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "143": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "307": { "file": "banktest.hny", "line": "31", "code": "    amount = choose {1..5}" },
    "263": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "43": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "50": { "file": "bank.hny", "line": "13", "code": "    atomically:" },
    "259": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "188": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "357": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "354": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "338": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "348": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "304": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "62": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "42": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "128": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "114": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "178": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "208": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "258": { "file": "banktest.hny", "line": "25", "code": "def transfer_test(acctFrom, acctTo, amount):" },
    "51": { "file": "bank.hny", "line": "13", "code": "    atomically:" },
    "3": { "file": "bank.hny", "line": "1", "code": "def Bank(n):" },
    "12": { "file": "bank.hny", "line": "4", "code": "def inquiry(bank, acct):" },
    "56": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "71": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "361": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "9": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "119": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "111": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "41": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "264": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "369": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "366": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "8": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "266": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "61": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "13": { "file": "bank.hny", "line": "4", "code": "def inquiry(bank, acct):" },
    "267": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "265": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "384": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "229": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "163": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "363": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "374": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "261": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "324": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "112": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "327": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "52": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "63": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "360": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "73": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "11": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "377": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "40": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "158": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "53": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "387": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "228": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "262": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "10": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "278": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "110": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "288": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "70": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "116": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "318": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "375": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "362": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "289": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "279": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "325": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "60": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "385": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "260": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "108": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "117": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "343": { "file": "banktest.hny", "line": "39", "code": "    amount = choose {1..5}" },
    "194": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "67": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "20": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "286": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "376": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "268": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "109": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "227": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "126": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "226": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "235": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "287": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "4": { "file": "bank.hny", "line": "1", "code": "def Bank(n):" },
    "295": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "134": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "292": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "371": { "file": "banktest.hny", "line": "44", "code": "        amount = choose {1..5}" },
    "30": { "file": "bank.hny", "line": "8", "code": "    atomically:" },
    "201": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "186": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "7": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "342": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "340": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "127": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "180": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "224": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "187": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "232": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "195": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "200": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "113": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "120": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "6": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "233": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "293": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "370": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "368": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "211": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "85": { "file": "bank.hny", "line": "20", "code": "def transfer(bank, acctFrom, acctTo, amount):" },
    "135": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "181": { "file": "banktest.hny", "line": "15", "code": "def deposit_test(acc, amount):" },
    "234": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "341": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "47": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "269": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "17": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "139": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "77": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "346": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "237": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "294": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "22": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "297": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "296": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "359": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "236": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "32": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "199": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "122": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "350": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "15": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "137": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "205": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "103": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "39": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "197": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "218": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "291": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "29": { "file": "bank.hny", "line": "8", "code": "    atomically:" },
    "182": { "file": "banktest.hny", "line": "15", "code": "def deposit_test(acc, amount):" },
    "82": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "353": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "190": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "231": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "378": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "121": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "92": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "290": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "130": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "230": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "196": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "57": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "219": { "file": "banktest.hny", "line": "20", "code": "def withdraw_test(acc, amount):" },
    "136": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "352": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "129": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "131": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "99": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "207": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "355": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "191": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "5": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "202": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "75": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "125": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "203": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "189": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "185": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "65": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "206": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "184": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "192": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "349": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "132": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "55": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "356": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "45": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "351": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "204": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "124": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "133": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "89": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "150": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "214": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "18": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "100": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "69": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "96": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "81": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "79": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "217": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "25": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "91": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "169": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "164": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "35": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "379": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "220": { "file": "banktest.hny", "line": "20", "code": "def withdraw_test(acc, amount):" },
    "49": { "file": "bank.hny", "line": "12", "code": "def withdraw(bank, acct, amount):" },
    "248": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "106": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "389": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "298": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "270": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "216": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "329": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "78": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "152": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "102": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "345": { "file": "banktest.hny", "line": "39", "code": "    amount = choose {1..5}" },
    "156": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "316": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "312": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "68": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "280": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "238": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "173": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "107": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "80": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "157": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "123": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "151": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "335": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "249": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "215": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "183": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "311": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "239": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "213": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "281": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "394": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "347": { "file": "banktest.hny", "line": "40", "code": "    spawn withdraw_test(i, amount)" },
    "313": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "308": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "271": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "34": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "358": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "344": { "file": "banktest.hny", "line": "39", "code": "    amount = choose {1..5}" },
    "337": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "101": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "24": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "19": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "334": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "221": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "90": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "165": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "310": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "212": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "48": { "file": "bank.hny", "line": "12", "code": "def withdraw(bank, acct, amount):" },
    "138": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "272": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "282": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "322": { "file": "banktest.hny", "line": "35", "code": "    amount = choose {1..5}" },
    "166": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "148": { "file": "banktest.hny", "line": "10", "code": "def inq_test(acc):" },
    "27": { "file": "bank.hny", "line": "7", "code": "def deposit(bank, acct, amount):" },
    "222": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "198": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "382": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "84": { "file": "bank.hny", "line": "20", "code": "def transfer(bank, acctFrom, acctTo, amount):" },
    "210": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "299": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "372": { "file": "banktest.hny", "line": "44", "code": "        amount = choose {1..5}" },
    "95": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "37": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "26": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "285": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "223": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "323": { "file": "banktest.hny", "line": "35", "code": "    amount = choose {1..5}" },
    "273": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "373": { "file": "banktest.hny", "line": "44", "code": "        amount = choose {1..5}" },
    "105": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "283": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "383": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "155": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "154": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "94": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "104": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "380": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "225": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "59": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "275": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "284": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "97": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "86": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "36": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "274": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "87": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "31": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "21": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "386": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "393": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "326": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "159": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "250": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "16": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "276": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "176": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "319": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "245": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "144": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "277": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "365": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "251": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "390": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "381": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "242": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "364": { "file": "banktest.hny", "line": "42", "code": "for i in {1..NTRA}:" },
    "330": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "64": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "332": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "44": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "145": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "177": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "161": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "392": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "162": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "170": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "333": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "74": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "321": { "file": "banktest.hny", "line": "35", "code": "    amount = choose {1..5}" },
    "243": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "320": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "391": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "367": { "file": "banktest.hny", "line": "43", "code": "    for j in {1..NTRA}:" },
    "33": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "244": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "66": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "331": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "167": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "76": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "14": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "160": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "118": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "23": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "149": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "58": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "309": { "file": "banktest.hny", "line": "32", "code": "    spawn inq_test(i)" },
    "247": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "246": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "46": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "314": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "147": { "file": "banktest.hny", "line": "10", "code": "def inq_test(acc):" },
    "300": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "336": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "303": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "93": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "140": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "241": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "172": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "153": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "240": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "317": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "388": { "file": "banktest.hny", "line": "45", "code": "        spawn transfer_test(i, j, amount)" },
    "315": { "file": "banktest.hny", "line": "34", "code": "for i in {1..NDEP}:" },
    "171": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "28": { "file": "bank.hny", "line": "7", "code": "def deposit(bank, acct, amount):" },
    "168": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "83": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "146": { "file": "banktest.hny", "line": "3", "code": "b = bank.Bank()" },
    "328": { "file": "banktest.hny", "line": "36", "code": "    spawn deposit_test(i, amount)" },
    "305": { "file": "banktest.hny", "line": "31", "code": "    amount = choose {1..5}" },
    "88": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "141": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "302": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "38": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "257": { "file": "banktest.hny", "line": "25", "code": "def transfer_test(acctFrom, acctTo, amount):" },
    "339": { "file": "banktest.hny", "line": "38", "code": "for i in {1..NINQ}:" },
    "252": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "175": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "253": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "256": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "179": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "54": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "98": { "file": "bank.hny", "line": "24", "code": "        atomically:" },
    "174": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "142": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "301": { "file": "banktest.hny", "line": "30", "code": "for i in {1..NINQ}:" },
    "255": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "254": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "306": { "file": "banktest.hny", "line": "31", "code": "    amount = choose {1..5}" }
  }
}
