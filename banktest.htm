<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>

#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

        
  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: Safety violation
      </th>
      <th align='center' colspan='1'>
        Shared Variables
      </th>
      <th align='center' colspan='1'>
        Output
      </th>
    </tr>
    <tr>
      <th align='center' rowspan='0'>
        Turn
      </th>
      <th align='center' rowspan='0'>
        Thread
      </th>
      <th align='center' rowspan='0'>
        Instructions Executed
      </th>
      <th align='center' rowspan='0'>
        &nbsp;PC&nbsp;
      </th>
    </tr>
  </thead>
  <tbody id='mestable'>
<tr id='mes0'>
  <td align='right'>
    1&nbsp;
  </td>
  <td>
    T0: __init__()  </td>
  <td>
    <canvas id='timeline0' width='300px' height='10px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log0' border='1'>
    </table>
  </td>
</tr>
  </tbody>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__ ()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable bank' id='C2'>
              Store bank
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 143' id='C3'>
              Jump 143
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Bank' id='C4'>
              Frame Bank n
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C5'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant [{ "balance":0 }]' id='C6'>
              Push [{ "balance":0 }]
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C7'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable n' id='C8'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying *' id='C9'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C10'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C11'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 143' id='C12'>
              Jump 143
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method inquiry' id='C13'>
              Frame inquiry (bank, acct)
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C14'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C15'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bank' id='C16'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bank' id='C17'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of acct' id='C18'>
              LoadVar acct
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable acct' id='C19'>
              DelVar acct
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C20'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "balance"' id='C21'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C22'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C23'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C24'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C25'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C26'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 143' id='C27'>
              Jump 143
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method deposit' id='C28'>
              Frame deposit (bank, acct, amount)
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C29'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C30'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bank' id='C31'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bank' id='C32'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acct' id='C33'>
              LoadVar acct
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acct' id='C34'>
              DelVar acct
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C35'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "balance"' id='C36'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C37'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C38'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C39'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of amount' id='C40'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable amount' id='C41'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C42'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C43'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C44'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C45'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C46'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C47'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 143' id='C48'>
              Jump 143
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method withdraw' id='C49'>
              Frame withdraw (bank, acct, amount)
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C50'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C51'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bank' id='C52'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acct' id='C53'>
              LoadVar acct
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C54'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "balance"' id='C55'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C56'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C57'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of amount' id='C58'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying <' id='C59'>
              2-ary <
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 67 if the value is False' id='C60'>
              JumpCond False 67
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable acct' id='C61'>
              DelVar acct
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable amount' id='C62'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bank' id='C63'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C64'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C65'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 82' id='C66'>
              Jump 82
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bank' id='C67'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bank' id='C68'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acct' id='C69'>
              LoadVar acct
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acct' id='C70'>
              DelVar acct
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C71'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "balance"' id='C72'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C73'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C74'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C75'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of amount' id='C76'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable amount' id='C77'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C78'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C79'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C80'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C81'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C82'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C83'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 143' id='C84'>
              Jump 143
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method transfer' id='C85'>
              Frame transfer (bank, acctFrom, acctTo, amount)
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C86'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acctFrom' id='C87'>
              LoadVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of acctTo' id='C88'>
              LoadVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C89'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 98 if the value is False' id='C90'>
              JumpCond False 98
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable acctFrom' id='C91'>
              DelVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acctTo' id='C92'>
              DelVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable amount' id='C93'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bank' id='C94'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C95'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C96'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 142' id='C97'>
              Jump 142
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C98'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bank' id='C99'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of acctFrom' id='C100'>
              LoadVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C101'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "balance"' id='C102'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C103'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C104'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of amount' id='C105'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <' id='C106'>
              2-ary <
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 115 if the value is False' id='C107'>
              JumpCond False 115
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acctFrom' id='C108'>
              DelVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable acctTo' id='C109'>
              DelVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P110'>
          <td align='right'>
            <a name='P110'>110</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable amount' id='C110'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P111'>
          <td align='right'>
            <a name='P111'>111</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bank' id='C111'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P112'>
          <td align='right'>
            <a name='P112'>112</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C112'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P113'>
          <td align='right'>
            <a name='P113'>113</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C113'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P114'>
          <td align='right'>
            <a name='P114'>114</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 141' id='C114'>
              Jump 141
            </span>
          </td>
        </tr>
        <tr id='P115'>
          <td align='right'>
            <a name='P115'>115</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bank' id='C115'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P116'>
          <td align='right'>
            <a name='P116'>116</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of acctFrom' id='C116'>
              LoadVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P117'>
          <td align='right'>
            <a name='P117'>117</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable acctFrom' id='C117'>
              DelVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P118'>
          <td align='right'>
            <a name='P118'>118</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C118'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P119'>
          <td align='right'>
            <a name='P119'>119</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "balance"' id='C119'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P120'>
          <td align='right'>
            <a name='P120'>120</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C120'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P121'>
          <td align='right'>
            <a name='P121'>121</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C121'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P122'>
          <td align='right'>
            <a name='P122'>122</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C122'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P123'>
          <td align='right'>
            <a name='P123'>123</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of amount' id='C123'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P124'>
          <td align='right'>
            <a name='P124'>124</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C124'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P125'>
          <td align='right'>
            <a name='P125'>125</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C125'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P126'>
          <td align='right'>
            <a name='P126'>126</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bank' id='C126'>
              LoadVar bank
            </span>
          </td>
        </tr>
        <tr id='P127'>
          <td align='right'>
            <a name='P127'>127</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bank' id='C127'>
              DelVar bank
            </span>
          </td>
        </tr>
        <tr id='P128'>
          <td align='right'>
            <a name='P128'>128</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of acctTo' id='C128'>
              LoadVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P129'>
          <td align='right'>
            <a name='P129'>129</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable acctTo' id='C129'>
              DelVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P130'>
          <td align='right'>
            <a name='P130'>130</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C130'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P131'>
          <td align='right'>
            <a name='P131'>131</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "balance"' id='C131'>
              Push "balance"
            </span>
          </td>
        </tr>
        <tr id='P132'>
          <td align='right'>
            <a name='P132'>132</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C132'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P133'>
          <td align='right'>
            <a name='P133'>133</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C133'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P134'>
          <td align='right'>
            <a name='P134'>134</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C134'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P135'>
          <td align='right'>
            <a name='P135'>135</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of amount' id='C135'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P136'>
          <td align='right'>
            <a name='P136'>136</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable amount' id='C136'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P137'>
          <td align='right'>
            <a name='P137'>137</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C137'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P138'>
          <td align='right'>
            <a name='P138'>138</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C138'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P139'>
          <td align='right'>
            <a name='P139'>139</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C139'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P140'>
          <td align='right'>
            <a name='P140'>140</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C140'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P141'>
          <td align='right'>
            <a name='P141'>141</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C141'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P142'>
          <td align='right'>
            <a name='P142'>142</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C142'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P143'>
          <td align='right'>
            <a name='P143'>143</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(4)' id='C143'>
              Push PC(4)
            </span>
          </td>
        </tr>
        <tr id='P144'>
          <td align='right'>
            <a name='P144'>144</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant [2, 2]' id='C144'>
              Push [2, 2]
            </span>
          </td>
        </tr>
        <tr id='P145'>
          <td align='right'>
            <a name='P145'>145</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C145'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P146'>
          <td align='right'>
            <a name='P146'>146</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable b' id='C146'>
              Store b
            </span>
          </td>
        </tr>
        <tr id='P147'>
          <td align='right'>
            <a name='P147'>147</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 299' id='C147'>
              Jump 299
            </span>
          </td>
        </tr>
        <tr id='P148'>
          <td align='right'>
            <a name='P148'>148</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method inq_test' id='C148'>
              Frame inq_test acc
            </span>
          </td>
        </tr>
        <tr id='P149'>
          <td align='right'>
            <a name='P149'>149</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C149'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P150'>
          <td align='right'>
            <a name='P150'>150</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C150'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P151'>
          <td align='right'>
            <a name='P151'>151</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "call inquiry: "' id='C151'>
              Push "call inquiry: "
            </span>
          </td>
        </tr>
        <tr id='P152'>
          <td align='right'>
            <a name='P152'>152</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C152'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P153'>
          <td align='right'>
            <a name='P153'>153</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C153'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P154'>
          <td align='right'>
            <a name='P154'>154</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable self' id='C154'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P155'>
          <td align='right'>
            <a name='P155'>155</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C155'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P156'>
          <td align='right'>
            <a name='P156'>156</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C156'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P157'>
          <td align='right'>
            <a name='P157'>157</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C157'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P158'>
          <td align='right'>
            <a name='P158'>158</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C158'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P159'>
          <td align='right'>
            <a name='P159'>159</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(13)' id='C159'>
              Push PC(13)
            </span>
          </td>
        </tr>
        <tr id='P160'>
          <td align='right'>
            <a name='P160'>160</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C160'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P161'>
          <td align='right'>
            <a name='P161'>161</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C161'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P162'>
          <td align='right'>
            <a name='P162'>162</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?b' id='C162'>
              Push ?b
            </span>
          </td>
        </tr>
        <tr id='P163'>
          <td align='right'>
            <a name='P163'>163</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C163'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P164'>
          <td align='right'>
            <a name='P164'>164</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C164'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P165'>
          <td align='right'>
            <a name='P165'>165</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acc' id='C165'>
              LoadVar acc
            </span>
          </td>
        </tr>
        <tr id='P166'>
          <td align='right'>
            <a name='P166'>166</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acc' id='C166'>
              DelVar acc
            </span>
          </td>
        </tr>
        <tr id='P167'>
          <td align='right'>
            <a name='P167'>167</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C167'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P168'>
          <td align='right'>
            <a name='P168'>168</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C168'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P169'>
          <td align='right'>
            <a name='P169'>169</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C169'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P170'>
          <td align='right'>
            <a name='P170'>170</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C170'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P171'>
          <td align='right'>
            <a name='P171'>171</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C171'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P172'>
          <td align='right'>
            <a name='P172'>172</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C172'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P173'>
          <td align='right'>
            <a name='P173'>173</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C173'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P174'>
          <td align='right'>
            <a name='P174'>174</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "done inquiry: "' id='C174'>
              Push "done inquiry: "
            </span>
          </td>
        </tr>
        <tr id='P175'>
          <td align='right'>
            <a name='P175'>175</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C175'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P176'>
          <td align='right'>
            <a name='P176'>176</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C176'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P177'>
          <td align='right'>
            <a name='P177'>177</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable self' id='C177'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P178'>
          <td align='right'>
            <a name='P178'>178</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C178'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P179'>
          <td align='right'>
            <a name='P179'>179</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C179'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P180'>
          <td align='right'>
            <a name='P180'>180</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C180'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P181'>
          <td align='right'>
            <a name='P181'>181</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 299' id='C181'>
              Jump 299
            </span>
          </td>
        </tr>
        <tr id='P182'>
          <td align='right'>
            <a name='P182'>182</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method deposit_test' id='C182'>
              Frame deposit_test (acc, amount)
            </span>
          </td>
        </tr>
        <tr id='P183'>
          <td align='right'>
            <a name='P183'>183</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C183'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P184'>
          <td align='right'>
            <a name='P184'>184</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C184'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P185'>
          <td align='right'>
            <a name='P185'>185</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "call deposit: "' id='C185'>
              Push "call deposit: "
            </span>
          </td>
        </tr>
        <tr id='P186'>
          <td align='right'>
            <a name='P186'>186</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C186'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P187'>
          <td align='right'>
            <a name='P187'>187</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C187'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P188'>
          <td align='right'>
            <a name='P188'>188</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable self' id='C188'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P189'>
          <td align='right'>
            <a name='P189'>189</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C189'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P190'>
          <td align='right'>
            <a name='P190'>190</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C190'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P191'>
          <td align='right'>
            <a name='P191'>191</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C191'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P192'>
          <td align='right'>
            <a name='P192'>192</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C192'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P193'>
          <td align='right'>
            <a name='P193'>193</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(13)' id='C193'>
              Push PC(13)
            </span>
          </td>
        </tr>
        <tr id='P194'>
          <td align='right'>
            <a name='P194'>194</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C194'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P195'>
          <td align='right'>
            <a name='P195'>195</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C195'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P196'>
          <td align='right'>
            <a name='P196'>196</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?b' id='C196'>
              Push ?b
            </span>
          </td>
        </tr>
        <tr id='P197'>
          <td align='right'>
            <a name='P197'>197</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C197'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P198'>
          <td align='right'>
            <a name='P198'>198</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C198'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P199'>
          <td align='right'>
            <a name='P199'>199</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acc' id='C199'>
              LoadVar acc
            </span>
          </td>
        </tr>
        <tr id='P200'>
          <td align='right'>
            <a name='P200'>200</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acc' id='C200'>
              DelVar acc
            </span>
          </td>
        </tr>
        <tr id='P201'>
          <td align='right'>
            <a name='P201'>201</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C201'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P202'>
          <td align='right'>
            <a name='P202'>202</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 2' id='C202'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P203'>
          <td align='right'>
            <a name='P203'>203</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of amount' id='C203'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P204'>
          <td align='right'>
            <a name='P204'>204</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable amount' id='C204'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P205'>
          <td align='right'>
            <a name='P205'>205</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C205'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P206'>
          <td align='right'>
            <a name='P206'>206</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C206'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P207'>
          <td align='right'>
            <a name='P207'>207</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C207'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P208'>
          <td align='right'>
            <a name='P208'>208</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C208'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P209'>
          <td align='right'>
            <a name='P209'>209</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C209'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P210'>
          <td align='right'>
            <a name='P210'>210</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C210'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P211'>
          <td align='right'>
            <a name='P211'>211</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C211'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P212'>
          <td align='right'>
            <a name='P212'>212</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "done deposit: "' id='C212'>
              Push "done deposit: "
            </span>
          </td>
        </tr>
        <tr id='P213'>
          <td align='right'>
            <a name='P213'>213</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C213'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P214'>
          <td align='right'>
            <a name='P214'>214</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C214'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P215'>
          <td align='right'>
            <a name='P215'>215</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable self' id='C215'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P216'>
          <td align='right'>
            <a name='P216'>216</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C216'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P217'>
          <td align='right'>
            <a name='P217'>217</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C217'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P218'>
          <td align='right'>
            <a name='P218'>218</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C218'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P219'>
          <td align='right'>
            <a name='P219'>219</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 299' id='C219'>
              Jump 299
            </span>
          </td>
        </tr>
        <tr id='P220'>
          <td align='right'>
            <a name='P220'>220</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method withdraw_test' id='C220'>
              Frame withdraw_test (acc, amount)
            </span>
          </td>
        </tr>
        <tr id='P221'>
          <td align='right'>
            <a name='P221'>221</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C221'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P222'>
          <td align='right'>
            <a name='P222'>222</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C222'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P223'>
          <td align='right'>
            <a name='P223'>223</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "call withdraw: "' id='C223'>
              Push "call withdraw: "
            </span>
          </td>
        </tr>
        <tr id='P224'>
          <td align='right'>
            <a name='P224'>224</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C224'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P225'>
          <td align='right'>
            <a name='P225'>225</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C225'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P226'>
          <td align='right'>
            <a name='P226'>226</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable self' id='C226'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P227'>
          <td align='right'>
            <a name='P227'>227</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C227'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P228'>
          <td align='right'>
            <a name='P228'>228</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C228'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P229'>
          <td align='right'>
            <a name='P229'>229</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C229'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P230'>
          <td align='right'>
            <a name='P230'>230</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C230'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P231'>
          <td align='right'>
            <a name='P231'>231</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(49)' id='C231'>
              Push PC(49)
            </span>
          </td>
        </tr>
        <tr id='P232'>
          <td align='right'>
            <a name='P232'>232</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C232'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P233'>
          <td align='right'>
            <a name='P233'>233</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C233'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P234'>
          <td align='right'>
            <a name='P234'>234</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?b' id='C234'>
              Push ?b
            </span>
          </td>
        </tr>
        <tr id='P235'>
          <td align='right'>
            <a name='P235'>235</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C235'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P236'>
          <td align='right'>
            <a name='P236'>236</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C236'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P237'>
          <td align='right'>
            <a name='P237'>237</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acc' id='C237'>
              LoadVar acc
            </span>
          </td>
        </tr>
        <tr id='P238'>
          <td align='right'>
            <a name='P238'>238</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acc' id='C238'>
              DelVar acc
            </span>
          </td>
        </tr>
        <tr id='P239'>
          <td align='right'>
            <a name='P239'>239</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C239'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P240'>
          <td align='right'>
            <a name='P240'>240</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 2' id='C240'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P241'>
          <td align='right'>
            <a name='P241'>241</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of amount' id='C241'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P242'>
          <td align='right'>
            <a name='P242'>242</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable amount' id='C242'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P243'>
          <td align='right'>
            <a name='P243'>243</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C243'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P244'>
          <td align='right'>
            <a name='P244'>244</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C244'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P245'>
          <td align='right'>
            <a name='P245'>245</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C245'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P246'>
          <td align='right'>
            <a name='P246'>246</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C246'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P247'>
          <td align='right'>
            <a name='P247'>247</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C247'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P248'>
          <td align='right'>
            <a name='P248'>248</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C248'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P249'>
          <td align='right'>
            <a name='P249'>249</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C249'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P250'>
          <td align='right'>
            <a name='P250'>250</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "done withdraw: "' id='C250'>
              Push "done withdraw: "
            </span>
          </td>
        </tr>
        <tr id='P251'>
          <td align='right'>
            <a name='P251'>251</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C251'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P252'>
          <td align='right'>
            <a name='P252'>252</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C252'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P253'>
          <td align='right'>
            <a name='P253'>253</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable self' id='C253'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P254'>
          <td align='right'>
            <a name='P254'>254</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C254'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P255'>
          <td align='right'>
            <a name='P255'>255</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C255'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P256'>
          <td align='right'>
            <a name='P256'>256</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C256'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P257'>
          <td align='right'>
            <a name='P257'>257</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 299' id='C257'>
              Jump 299
            </span>
          </td>
        </tr>
        <tr id='P258'>
          <td align='right'>
            <a name='P258'>258</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method transfer_test' id='C258'>
              Frame transfer_test (acctFrom, acctTo, amount)
            </span>
          </td>
        </tr>
        <tr id='P259'>
          <td align='right'>
            <a name='P259'>259</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C259'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P260'>
          <td align='right'>
            <a name='P260'>260</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C260'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P261'>
          <td align='right'>
            <a name='P261'>261</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "call transfer: "' id='C261'>
              Push "call transfer: "
            </span>
          </td>
        </tr>
        <tr id='P262'>
          <td align='right'>
            <a name='P262'>262</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C262'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P263'>
          <td align='right'>
            <a name='P263'>263</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C263'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P264'>
          <td align='right'>
            <a name='P264'>264</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable self' id='C264'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P265'>
          <td align='right'>
            <a name='P265'>265</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C265'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P266'>
          <td align='right'>
            <a name='P266'>266</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C266'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P267'>
          <td align='right'>
            <a name='P267'>267</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C267'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P268'>
          <td align='right'>
            <a name='P268'>268</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C268'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P269'>
          <td align='right'>
            <a name='P269'>269</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(85)' id='C269'>
              Push PC(85)
            </span>
          </td>
        </tr>
        <tr id='P270'>
          <td align='right'>
            <a name='P270'>270</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C270'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P271'>
          <td align='right'>
            <a name='P271'>271</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C271'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P272'>
          <td align='right'>
            <a name='P272'>272</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?b' id='C272'>
              Push ?b
            </span>
          </td>
        </tr>
        <tr id='P273'>
          <td align='right'>
            <a name='P273'>273</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C273'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P274'>
          <td align='right'>
            <a name='P274'>274</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C274'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P275'>
          <td align='right'>
            <a name='P275'>275</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acctFrom' id='C275'>
              LoadVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P276'>
          <td align='right'>
            <a name='P276'>276</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acctFrom' id='C276'>
              DelVar acctFrom
            </span>
          </td>
        </tr>
        <tr id='P277'>
          <td align='right'>
            <a name='P277'>277</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C277'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P278'>
          <td align='right'>
            <a name='P278'>278</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 2' id='C278'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P279'>
          <td align='right'>
            <a name='P279'>279</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acctTo' id='C279'>
              LoadVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P280'>
          <td align='right'>
            <a name='P280'>280</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acctTo' id='C280'>
              DelVar acctTo
            </span>
          </td>
        </tr>
        <tr id='P281'>
          <td align='right'>
            <a name='P281'>281</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C281'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P282'>
          <td align='right'>
            <a name='P282'>282</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 3' id='C282'>
              Push 3
            </span>
          </td>
        </tr>
        <tr id='P283'>
          <td align='right'>
            <a name='P283'>283</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of amount' id='C283'>
              LoadVar amount
            </span>
          </td>
        </tr>
        <tr id='P284'>
          <td align='right'>
            <a name='P284'>284</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable amount' id='C284'>
              DelVar amount
            </span>
          </td>
        </tr>
        <tr id='P285'>
          <td align='right'>
            <a name='P285'>285</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C285'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P286'>
          <td align='right'>
            <a name='P286'>286</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C286'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P287'>
          <td align='right'>
            <a name='P287'>287</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C287'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P288'>
          <td align='right'>
            <a name='P288'>288</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C288'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P289'>
          <td align='right'>
            <a name='P289'>289</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C289'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P290'>
          <td align='right'>
            <a name='P290'>290</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C290'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P291'>
          <td align='right'>
            <a name='P291'>291</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C291'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P292'>
          <td align='right'>
            <a name='P292'>292</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "done transfer: "' id='C292'>
              Push "done transfer: "
            </span>
          </td>
        </tr>
        <tr id='P293'>
          <td align='right'>
            <a name='P293'>293</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C293'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P294'>
          <td align='right'>
            <a name='P294'>294</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C294'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P295'>
          <td align='right'>
            <a name='P295'>295</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable self' id='C295'>
              Load self
            </span>
          </td>
        </tr>
        <tr id='P296'>
          <td align='right'>
            <a name='P296'>296</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C296'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P297'>
          <td align='right'>
            <a name='P297'>297</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C297'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P298'>
          <td align='right'>
            <a name='P298'>298</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C298'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P299'>
          <td align='right'>
            <a name='P299'>299</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1 }' id='C299'>
              Push { 1 }
            </span>
          </td>
        </tr>
        <tr id='P300'>
          <td align='right'>
            <a name='P300'>300</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $s262' id='C300'>
              StoreVar $s262
            </span>
          </td>
        </tr>
        <tr id='P301'>
          <td align='right'>
            <a name='P301'>301</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $s262' id='C301'>
              LoadVar $s262
            </span>
          </td>
        </tr>
        <tr id='P302'>
          <td align='right'>
            <a name='P302'>302</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying IsEmpty' id='C302'>
              1-ary IsEmpty
            </span>
          </td>
        </tr>
        <tr id='P303'>
          <td align='right'>
            <a name='P303'>303</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 314 if the value is True' id='C303'>
              JumpCond True 314
            </span>
          </td>
        </tr>
        <tr id='P304'>
          <td align='right'>
            <a name='P304'>304</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='remove smallest element from $s262 and assign to i' id='C304'>
              Cut($s262, i)
            </span>
          </td>
        </tr>
        <tr id='P305'>
          <td align='right'>
            <a name='P305'>305</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2, 3, 4, 5 }' id='C305'>
              Push { 1, 2, 3, 4, 5 }
            </span>
          </td>
        </tr>
        <tr id='P306'>
          <td align='right'>
            <a name='P306'>306</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C306'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P307'>
          <td align='right'>
            <a name='P307'>307</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable amount' id='C307'>
              Store amount
            </span>
          </td>
        </tr>
        <tr id='P308'>
          <td align='right'>
            <a name='P308'>308</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(148)' id='C308'>
              Push PC(148)
            </span>
          </td>
        </tr>
        <tr id='P309'>
          <td align='right'>
            <a name='P309'>309</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C309'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P310'>
          <td align='right'>
            <a name='P310'>310</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C310'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P311'>
          <td align='right'>
            <a name='P311'>311</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C311'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P312'>
          <td align='right'>
            <a name='P312'>312</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C312'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P313'>
          <td align='right'>
            <a name='P313'>313</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 301' id='C313'>
              Jump 301
            </span>
          </td>
        </tr>
        <tr id='P314'>
          <td align='right'>
            <a name='P314'>314</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $s262' id='C314'>
              DelVar $s262
            </span>
          </td>
        </tr>
        <tr id='P315'>
          <td align='right'>
            <a name='P315'>315</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2 }' id='C315'>
              Push { 1, 2 }
            </span>
          </td>
        </tr>
        <tr id='P316'>
          <td align='right'>
            <a name='P316'>316</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $s276' id='C316'>
              StoreVar $s276
            </span>
          </td>
        </tr>
        <tr id='P317'>
          <td align='right'>
            <a name='P317'>317</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $s276' id='C317'>
              LoadVar $s276
            </span>
          </td>
        </tr>
        <tr id='P318'>
          <td align='right'>
            <a name='P318'>318</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying IsEmpty' id='C318'>
              1-ary IsEmpty
            </span>
          </td>
        </tr>
        <tr id='P319'>
          <td align='right'>
            <a name='P319'>319</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 336 if the value is True' id='C319'>
              JumpCond True 336
            </span>
          </td>
        </tr>
        <tr id='P320'>
          <td align='right'>
            <a name='P320'>320</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='remove smallest element from $s276 and assign to i' id='C320'>
              Cut($s276, i)
            </span>
          </td>
        </tr>
        <tr id='P321'>
          <td align='right'>
            <a name='P321'>321</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2, 3, 4, 5 }' id='C321'>
              Push { 1, 2, 3, 4, 5 }
            </span>
          </td>
        </tr>
        <tr id='P322'>
          <td align='right'>
            <a name='P322'>322</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C322'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P323'>
          <td align='right'>
            <a name='P323'>323</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable amount' id='C323'>
              Store amount
            </span>
          </td>
        </tr>
        <tr id='P324'>
          <td align='right'>
            <a name='P324'>324</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(182)' id='C324'>
              Push PC(182)
            </span>
          </td>
        </tr>
        <tr id='P325'>
          <td align='right'>
            <a name='P325'>325</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C325'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P326'>
          <td align='right'>
            <a name='P326'>326</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C326'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P327'>
          <td align='right'>
            <a name='P327'>327</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C327'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P328'>
          <td align='right'>
            <a name='P328'>328</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C328'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P329'>
          <td align='right'>
            <a name='P329'>329</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C329'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P330'>
          <td align='right'>
            <a name='P330'>330</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C330'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P331'>
          <td align='right'>
            <a name='P331'>331</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable amount' id='C331'>
              Load amount
            </span>
          </td>
        </tr>
        <tr id='P332'>
          <td align='right'>
            <a name='P332'>332</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C332'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P333'>
          <td align='right'>
            <a name='P333'>333</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C333'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P334'>
          <td align='right'>
            <a name='P334'>334</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C334'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P335'>
          <td align='right'>
            <a name='P335'>335</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 317' id='C335'>
              Jump 317
            </span>
          </td>
        </tr>
        <tr id='P336'>
          <td align='right'>
            <a name='P336'>336</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $s276' id='C336'>
              DelVar $s276
            </span>
          </td>
        </tr>
        <tr id='P337'>
          <td align='right'>
            <a name='P337'>337</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1 }' id='C337'>
              Push { 1 }
            </span>
          </td>
        </tr>
        <tr id='P338'>
          <td align='right'>
            <a name='P338'>338</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $s296' id='C338'>
              StoreVar $s296
            </span>
          </td>
        </tr>
        <tr id='P339'>
          <td align='right'>
            <a name='P339'>339</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $s296' id='C339'>
              LoadVar $s296
            </span>
          </td>
        </tr>
        <tr id='P340'>
          <td align='right'>
            <a name='P340'>340</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying IsEmpty' id='C340'>
              1-ary IsEmpty
            </span>
          </td>
        </tr>
        <tr id='P341'>
          <td align='right'>
            <a name='P341'>341</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 358 if the value is True' id='C341'>
              JumpCond True 358
            </span>
          </td>
        </tr>
        <tr id='P342'>
          <td align='right'>
            <a name='P342'>342</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='remove smallest element from $s296 and assign to i' id='C342'>
              Cut($s296, i)
            </span>
          </td>
        </tr>
        <tr id='P343'>
          <td align='right'>
            <a name='P343'>343</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2, 3, 4, 5 }' id='C343'>
              Push { 1, 2, 3, 4, 5 }
            </span>
          </td>
        </tr>
        <tr id='P344'>
          <td align='right'>
            <a name='P344'>344</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C344'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P345'>
          <td align='right'>
            <a name='P345'>345</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable amount' id='C345'>
              Store amount
            </span>
          </td>
        </tr>
        <tr id='P346'>
          <td align='right'>
            <a name='P346'>346</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(220)' id='C346'>
              Push PC(220)
            </span>
          </td>
        </tr>
        <tr id='P347'>
          <td align='right'>
            <a name='P347'>347</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C347'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P348'>
          <td align='right'>
            <a name='P348'>348</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C348'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P349'>
          <td align='right'>
            <a name='P349'>349</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C349'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P350'>
          <td align='right'>
            <a name='P350'>350</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C350'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P351'>
          <td align='right'>
            <a name='P351'>351</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C351'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P352'>
          <td align='right'>
            <a name='P352'>352</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C352'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P353'>
          <td align='right'>
            <a name='P353'>353</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable amount' id='C353'>
              Load amount
            </span>
          </td>
        </tr>
        <tr id='P354'>
          <td align='right'>
            <a name='P354'>354</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C354'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P355'>
          <td align='right'>
            <a name='P355'>355</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C355'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P356'>
          <td align='right'>
            <a name='P356'>356</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C356'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P357'>
          <td align='right'>
            <a name='P357'>357</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 339' id='C357'>
              Jump 339
            </span>
          </td>
        </tr>
        <tr id='P358'>
          <td align='right'>
            <a name='P358'>358</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $s296' id='C358'>
              DelVar $s296
            </span>
          </td>
        </tr>
        <tr id='P359'>
          <td align='right'>
            <a name='P359'>359</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2 }' id='C359'>
              Push { 1, 2 }
            </span>
          </td>
        </tr>
        <tr id='P360'>
          <td align='right'>
            <a name='P360'>360</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $s316' id='C360'>
              StoreVar $s316
            </span>
          </td>
        </tr>
        <tr id='P361'>
          <td align='right'>
            <a name='P361'>361</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $s316' id='C361'>
              LoadVar $s316
            </span>
          </td>
        </tr>
        <tr id='P362'>
          <td align='right'>
            <a name='P362'>362</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying IsEmpty' id='C362'>
              1-ary IsEmpty
            </span>
          </td>
        </tr>
        <tr id='P363'>
          <td align='right'>
            <a name='P363'>363</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 392 if the value is True' id='C363'>
              JumpCond True 392
            </span>
          </td>
        </tr>
        <tr id='P364'>
          <td align='right'>
            <a name='P364'>364</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='remove smallest element from $s316 and assign to i' id='C364'>
              Cut($s316, i)
            </span>
          </td>
        </tr>
        <tr id='P365'>
          <td align='right'>
            <a name='P365'>365</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2 }' id='C365'>
              Push { 1, 2 }
            </span>
          </td>
        </tr>
        <tr id='P366'>
          <td align='right'>
            <a name='P366'>366</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $s322' id='C366'>
              StoreVar $s322
            </span>
          </td>
        </tr>
        <tr id='P367'>
          <td align='right'>
            <a name='P367'>367</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $s322' id='C367'>
              LoadVar $s322
            </span>
          </td>
        </tr>
        <tr id='P368'>
          <td align='right'>
            <a name='P368'>368</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying IsEmpty' id='C368'>
              1-ary IsEmpty
            </span>
          </td>
        </tr>
        <tr id='P369'>
          <td align='right'>
            <a name='P369'>369</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 389 if the value is True' id='C369'>
              JumpCond True 389
            </span>
          </td>
        </tr>
        <tr id='P370'>
          <td align='right'>
            <a name='P370'>370</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='remove smallest element from $s322 and assign to j' id='C370'>
              Cut($s322, j)
            </span>
          </td>
        </tr>
        <tr id='P371'>
          <td align='right'>
            <a name='P371'>371</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2, 3, 4, 5 }' id='C371'>
              Push { 1, 2, 3, 4, 5 }
            </span>
          </td>
        </tr>
        <tr id='P372'>
          <td align='right'>
            <a name='P372'>372</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C372'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P373'>
          <td align='right'>
            <a name='P373'>373</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable amount' id='C373'>
              Store amount
            </span>
          </td>
        </tr>
        <tr id='P374'>
          <td align='right'>
            <a name='P374'>374</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(258)' id='C374'>
              Push PC(258)
            </span>
          </td>
        </tr>
        <tr id='P375'>
          <td align='right'>
            <a name='P375'>375</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C375'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P376'>
          <td align='right'>
            <a name='P376'>376</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C376'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P377'>
          <td align='right'>
            <a name='P377'>377</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C377'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P378'>
          <td align='right'>
            <a name='P378'>378</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C378'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P379'>
          <td align='right'>
            <a name='P379'>379</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C379'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P380'>
          <td align='right'>
            <a name='P380'>380</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of j' id='C380'>
              LoadVar j
            </span>
          </td>
        </tr>
        <tr id='P381'>
          <td align='right'>
            <a name='P381'>381</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable j' id='C381'>
              DelVar j
            </span>
          </td>
        </tr>
        <tr id='P382'>
          <td align='right'>
            <a name='P382'>382</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C382'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P383'>
          <td align='right'>
            <a name='P383'>383</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C383'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P384'>
          <td align='right'>
            <a name='P384'>384</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable amount' id='C384'>
              Load amount
            </span>
          </td>
        </tr>
        <tr id='P385'>
          <td align='right'>
            <a name='P385'>385</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C385'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P386'>
          <td align='right'>
            <a name='P386'>386</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C386'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P387'>
          <td align='right'>
            <a name='P387'>387</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C387'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P388'>
          <td align='right'>
            <a name='P388'>388</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 367' id='C388'>
              Jump 367
            </span>
          </td>
        </tr>
        <tr id='P389'>
          <td align='right'>
            <a name='P389'>389</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $s322' id='C389'>
              DelVar $s322
            </span>
          </td>
        </tr>
        <tr id='P390'>
          <td align='right'>
            <a name='P390'>390</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C390'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P391'>
          <td align='right'>
            <a name='P391'>391</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 361' id='C391'>
              Jump 361
            </span>
          </td>
        </tr>
        <tr id='P392'>
          <td align='right'>
            <a name='P392'>392</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $s316' id='C392'>
              DelVar $s316
            </span>
          </td>
        </tr>
        <tr id='P393'>
          <td align='right'>
            <a name='P393'>393</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C393'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P394'>
          <td align='right'>
            <a name='P394'>394</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C394'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
<table border='1'
  <thead>
    <tr>
      <th colspan='4'>Threads</th>
    </tr>
    <tr>
      <th>
        ID
      </th>
      <th>
        Status
      </th>
      <th>
        Stack Trace
      </th>
      <th>
        Stack Top
      </th>
    </tr>
  </thead>
  <tbody id='threadtable'>
    <tr id='thread0'>
      <td align='center'>
        T0
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo0' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
  </tbody>
</table>
    </td>
  </tr>
</table>
<script>
var nthreads = 1;
var nmegasteps = 1;
var vardir = [
  []
];
var state =
{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "xhash": "2348aba5a77",
      "name": "__init__()",
      "microsteps": [
        {
          "shared": { },
          "npc": "1",
          "fp": "4",
          "trace": [
            {
              "pc": "1",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "0"
        },
        {
          "npc": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1"
        },
        {
          "shared": { "bank": { "type": "dict", "value": [] } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },
        {
          "npc": "143",
          "push": [ ],
          "pc": "3"
        },
        {
          "npc": "144",
          "push": [ { "type": "pc", "value": "4" } ],
          "pc": "143"
        },
        {
          "npc": "145",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "144"
        },
        {
          "npc": "4",
          "pop": "2",
          "push": [ { "type": "pc", "value": "146" }, { "type": "int", "value": "2" }, { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "145"
        },
        {
          "npc": "5",
          "fp": "9",
          "trace": [
            {
              "pc": "146",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "5",
              "xpc": "4",
              "method": "Bank(2, 2)",
              "calltype": "normal",
              "vars": { "n": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "2" } } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "n": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "2" } } ] }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "4" } ],
          "pc": "4"
        },
        {
          "npc": "6",
          "local": { "n": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "2" } } ] } },
          "push": [ ],
          "pc": "5"
        },
        {
          "npc": "7",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "balance" }, "value": { "type": "int", "value": "0" } } ] } } ] } ],
          "pc": "6"
        },
        {
          "npc": "8",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "7"
        },
        {
          "npc": "9",
          "local": { },
          "push": [ ],
          "pc": "8"
        },
        {
          "npc": "9",
          "failure": "* can only have at most one list or string",
          "mode": "failed",
          "pop": "2",
          "push": [ ],
          "pc": "9"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "2348aba5fb7",
          "name": "__init__()",
          "entry": "0",
          "pc": "9",
          "fp": "9",
          "trace": [
            {
              "pc": "146",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "9",
              "xpc": "4",
              "method": "Bank(2, 2)",
              "calltype": "normal",
              "vars": { }
            }
          ],
          "failure": "* can only have at most one list or string",
          "atomic": "1",
          "mode": "failed",
          "this": { "type": "dict", "value": [] }
        }
      ]
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Push ()",
    "Store bank",
    "Jump 143",
    "Frame Bank n",
    "DelVar result",
    "Push [{ \"balance\":0 }]",
    "LoadVar n",
    "DelVar n",
    "2-ary *",
    "StoreVar result",
    "Return",
    "Jump 143",
    "Frame inquiry (bank, acct)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acct",
    "DelVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Load",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 143",
    "Frame deposit (bank, acct, amount)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acct",
    "DelVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "DelVar amount",
    "2-ary +",
    "Store",
    "Push True",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 143",
    "Frame withdraw (bank, acct, amount)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "LoadVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Load",
    "LoadVar amount",
    "2-ary <",
    "JumpCond False 67",
    "DelVar acct",
    "DelVar amount",
    "DelVar bank",
    "Push False",
    "StoreVar result",
    "Jump 82",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acct",
    "DelVar acct",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "DelVar amount",
    "2-ary -",
    "Store",
    "Push True",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 143",
    "Frame transfer (bank, acctFrom, acctTo, amount)",
    "DelVar result",
    "LoadVar acctFrom",
    "LoadVar acctTo",
    "2-ary ==",
    "JumpCond False 98",
    "DelVar acctFrom",
    "DelVar acctTo",
    "DelVar amount",
    "DelVar bank",
    "Push False",
    "StoreVar result",
    "Jump 142",
    "AtomicInc(lazy)",
    "LoadVar bank",
    "LoadVar acctFrom",
    "Address",
    "Push \"balance\"",
    "Address",
    "Load",
    "LoadVar amount",
    "2-ary <",
    "JumpCond False 115",
    "DelVar acctFrom",
    "DelVar acctTo",
    "DelVar amount",
    "DelVar bank",
    "Push False",
    "StoreVar result",
    "Jump 141",
    "LoadVar bank",
    "LoadVar acctFrom",
    "DelVar acctFrom",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "2-ary -",
    "Store",
    "LoadVar bank",
    "DelVar bank",
    "LoadVar acctTo",
    "DelVar acctTo",
    "Address",
    "Push \"balance\"",
    "Address",
    "Dup",
    "Load",
    "LoadVar amount",
    "DelVar amount",
    "2-ary +",
    "Store",
    "Push True",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Push PC(4)",
    "Push [2, 2]",
    "Apply",
    "Store b",
    "Jump 299",
    "Frame inq_test acc",
    "Push ()",
    "Push 0",
    "Push \"call inquiry: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(13)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acc",
    "DelVar acc",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done inquiry: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 299",
    "Frame deposit_test (acc, amount)",
    "Push ()",
    "Push 0",
    "Push \"call deposit: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(13)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acc",
    "DelVar acc",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar amount",
    "DelVar amount",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done deposit: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 299",
    "Frame withdraw_test (acc, amount)",
    "Push ()",
    "Push 0",
    "Push \"call withdraw: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(49)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acc",
    "DelVar acc",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar amount",
    "DelVar amount",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done withdraw: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 299",
    "Frame transfer_test (acctFrom, acctTo, amount)",
    "Push ()",
    "Push 0",
    "Push \"call transfer: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(85)",
    "Push ()",
    "Push 0",
    "Push ?b",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar acctFrom",
    "DelVar acctFrom",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar acctTo",
    "DelVar acctTo",
    "3-ary DictAdd",
    "Push 3",
    "LoadVar amount",
    "DelVar amount",
    "3-ary DictAdd",
    "Apply",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push ()",
    "Push 0",
    "Push \"done transfer: \"",
    "3-ary DictAdd",
    "Push 1",
    "Load self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Push { 1 }",
    "StoreVar $s262",
    "LoadVar $s262",
    "1-ary IsEmpty",
    "JumpCond True 314",
    "Cut($s262, i)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(148)",
    "LoadVar i",
    "DelVar i",
    "Push ()",
    "Spawn",
    "Jump 301",
    "DelVar $s262",
    "Push { 1, 2 }",
    "StoreVar $s276",
    "LoadVar $s276",
    "1-ary IsEmpty",
    "JumpCond True 336",
    "Cut($s276, i)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(182)",
    "Push ()",
    "Push 0",
    "LoadVar i",
    "DelVar i",
    "3-ary DictAdd",
    "Push 1",
    "Load amount",
    "3-ary DictAdd",
    "Push ()",
    "Spawn",
    "Jump 317",
    "DelVar $s276",
    "Push { 1 }",
    "StoreVar $s296",
    "LoadVar $s296",
    "1-ary IsEmpty",
    "JumpCond True 358",
    "Cut($s296, i)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(220)",
    "Push ()",
    "Push 0",
    "LoadVar i",
    "DelVar i",
    "3-ary DictAdd",
    "Push 1",
    "Load amount",
    "3-ary DictAdd",
    "Push ()",
    "Spawn",
    "Jump 339",
    "DelVar $s296",
    "Push { 1, 2 }",
    "StoreVar $s316",
    "LoadVar $s316",
    "1-ary IsEmpty",
    "JumpCond True 392",
    "Cut($s316, i)",
    "Push { 1, 2 }",
    "StoreVar $s322",
    "LoadVar $s322",
    "1-ary IsEmpty",
    "JumpCond True 389",
    "Cut($s322, j)",
    "Push { 1, 2, 3, 4, 5 }",
    "Choose",
    "Store amount",
    "Push PC(258)",
    "Push ()",
    "Push 0",
    "LoadVar i",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar j",
    "DelVar j",
    "3-ary DictAdd",
    "Push 2",
    "Load amount",
    "3-ary DictAdd",
    "Push ()",
    "Spawn",
    "Jump 367",
    "DelVar $s322",
    "DelVar i",
    "Jump 361",
    "DelVar $s316",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "push constant ()",
    "pop a value and store it in shared variable bank",
    "set program counter to 143",
    "start of method Bank",
    "delete method variable result",
    "push constant [{ \"balance\":0 }]",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying *",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method inquiry",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acct",
    "delete method variable acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method deposit",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acct",
    "delete method variable acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "delete method variable amount",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method withdraw",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "push the value of acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of amount",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 67 if the value is False",
    "delete method variable acct",
    "delete method variable amount",
    "delete method variable bank",
    "push constant False",
    "pop a value and store in result",
    "set program counter to 82",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acct",
    "delete method variable acct",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "delete method variable amount",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 143",
    "start of method transfer",
    "delete method variable result",
    "push the value of acctFrom",
    "push the value of acctTo",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 98 if the value is False",
    "delete method variable acctFrom",
    "delete method variable acctTo",
    "delete method variable amount",
    "delete method variable bank",
    "push constant False",
    "pop a value and store in result",
    "set program counter to 142",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bank",
    "push the value of acctFrom",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of amount",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 115 if the value is False",
    "delete method variable acctFrom",
    "delete method variable acctTo",
    "delete method variable amount",
    "delete method variable bank",
    "push constant False",
    "pop a value and store in result",
    "set program counter to 141",
    "push the value of bank",
    "push the value of acctFrom",
    "delete method variable acctFrom",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push the value of bank",
    "delete method variable bank",
    "push the value of acctTo",
    "delete method variable acctTo",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"balance\"",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of amount",
    "delete method variable amount",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "push constant PC(4)",
    "push constant [2, 2]",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable b",
    "set program counter to 299",
    "start of method inq_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call inquiry: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(13)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acc",
    "delete method variable acc",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done inquiry: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 299",
    "start of method deposit_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call deposit: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(13)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acc",
    "delete method variable acc",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of amount",
    "delete method variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done deposit: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 299",
    "start of method withdraw_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call withdraw: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(49)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acc",
    "delete method variable acc",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of amount",
    "delete method variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done withdraw: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 299",
    "start of method transfer_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call transfer: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(85)",
    "push constant ()",
    "push constant 0",
    "push constant ?b",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of acctFrom",
    "delete method variable acctFrom",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of acctTo",
    "delete method variable acctTo",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 3",
    "push the value of amount",
    "delete method variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant ()",
    "push constant 0",
    "push constant \"done transfer: \"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "push constant { 1 }",
    "pop a value and store in $s262",
    "push the value of $s262",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 314 if the value is True",
    "remove smallest element from $s262 and assign to i",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(148)",
    "push the value of i",
    "delete method variable i",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 301",
    "delete method variable $s262",
    "push constant { 1, 2 }",
    "pop a value and store in $s276",
    "push the value of $s276",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 336 if the value is True",
    "remove smallest element from $s276 and assign to i",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(182)",
    "push constant ()",
    "push constant 0",
    "push the value of i",
    "delete method variable i",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 317",
    "delete method variable $s276",
    "push constant { 1 }",
    "pop a value and store in $s296",
    "push the value of $s296",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 358 if the value is True",
    "remove smallest element from $s296 and assign to i",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(220)",
    "push constant ()",
    "push constant 0",
    "push the value of i",
    "delete method variable i",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push value of shared variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 339",
    "delete method variable $s296",
    "push constant { 1, 2 }",
    "pop a value and store in $s316",
    "push the value of $s316",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 392 if the value is True",
    "remove smallest element from $s316 and assign to i",
    "push constant { 1, 2 }",
    "pop a value and store in $s322",
    "push the value of $s322",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 389 if the value is True",
    "remove smallest element from $s322 and assign to j",
    "push constant { 1, 2, 3, 4, 5 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable amount",
    "push constant PC(258)",
    "push constant ()",
    "push constant 0",
    "push the value of i",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of j",
    "delete method variable j",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push value of shared variable amount",
    "pop 3 values and push the result of applying DictAdd",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 367",
    "delete method variable $s322",
    "delete method variable i",
    "set program counter to 361",
    "delete method variable $s316",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "115": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "209": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "193": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "72": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "143": { "file": "banktest.hny", "line": "8", "code": "b = bank.Bank((max(max(NINQ,NDEP),NWIT),NTRA))" },
    "307": { "file": "banktest.hny", "line": "32", "code": "    amount = choose {1..5}" },
    "263": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "43": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "50": { "file": "bank.hny", "line": "13", "code": "    atomically:" },
    "259": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "188": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "357": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "354": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "338": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "348": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "304": { "file": "banktest.hny", "line": "31", "code": "for i in {1..NINQ}:" },
    "62": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "42": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "128": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "114": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "178": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "208": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "258": { "file": "banktest.hny", "line": "25", "code": "def transfer_test(acctFrom, acctTo, amount):" },
    "51": { "file": "bank.hny", "line": "13", "code": "    atomically:" },
    "3": { "file": "bank.hny", "line": "1", "code": "def Bank(n):" },
    "12": { "file": "bank.hny", "line": "4", "code": "def inquiry(bank, acct):" },
    "56": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "71": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "361": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "9": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "119": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "111": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "41": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "264": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "369": { "file": "banktest.hny", "line": "44", "code": "    for j in {1..NTRA}:" },
    "366": { "file": "banktest.hny", "line": "44", "code": "    for j in {1..NTRA}:" },
    "8": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "266": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "61": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "13": { "file": "bank.hny", "line": "4", "code": "def inquiry(bank, acct):" },
    "267": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "265": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "384": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "229": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "163": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "363": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "374": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "261": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "324": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "112": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "327": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "52": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "63": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "360": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "73": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "11": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "377": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "40": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "158": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "53": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "387": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "228": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "262": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "10": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "278": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "110": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "288": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "70": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "116": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "318": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "375": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "362": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "289": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "279": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "325": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "60": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "385": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "260": { "file": "banktest.hny", "line": "26", "code": "    print(\"call transfer: \", self)" },
    "108": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "117": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "343": { "file": "banktest.hny", "line": "40", "code": "    amount = choose {1..5}" },
    "194": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "67": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "20": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "286": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "376": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "268": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "109": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "227": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "126": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "226": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "235": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "287": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "4": { "file": "bank.hny", "line": "1", "code": "def Bank(n):" },
    "295": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "134": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "292": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "371": { "file": "banktest.hny", "line": "45", "code": "        amount = choose {1..5}" },
    "30": { "file": "bank.hny", "line": "8", "code": "    atomically:" },
    "201": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "186": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "7": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "342": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "340": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "127": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "180": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "224": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "187": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "232": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "195": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "200": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "113": { "file": "bank.hny", "line": "26", "code": "                result = False" },
    "120": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "6": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "233": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "293": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "370": { "file": "banktest.hny", "line": "44", "code": "    for j in {1..NTRA}:" },
    "368": { "file": "banktest.hny", "line": "44", "code": "    for j in {1..NTRA}:" },
    "211": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "85": { "file": "bank.hny", "line": "20", "code": "def transfer(bank, acctFrom, acctTo, amount):" },
    "135": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "181": { "file": "banktest.hny", "line": "15", "code": "def deposit_test(acc, amount):" },
    "234": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "341": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "47": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "269": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "17": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "139": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "77": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "346": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "237": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "294": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "22": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "297": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "296": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "359": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "236": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "32": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "199": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "122": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "350": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "15": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "137": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "205": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "103": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "39": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "197": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "218": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "291": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "29": { "file": "bank.hny", "line": "8", "code": "    atomically:" },
    "182": { "file": "banktest.hny", "line": "15", "code": "def deposit_test(acc, amount):" },
    "82": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "353": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "190": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "231": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "378": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "121": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "92": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "290": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "130": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "230": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "196": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "57": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "219": { "file": "banktest.hny", "line": "20", "code": "def withdraw_test(acc, amount):" },
    "136": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "352": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "129": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "131": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "99": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "207": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "355": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "191": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "5": { "file": "bank.hny", "line": "2", "code": "    result = [ { .balance: 0 }, ] * n" },
    "202": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "75": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "125": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "203": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "189": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "185": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "65": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "206": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "184": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "192": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "349": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "132": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "55": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "356": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "45": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "351": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "204": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "124": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "133": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "89": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "150": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "214": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "18": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "100": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "69": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "96": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "81": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "79": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "217": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "25": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "91": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "169": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "164": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "35": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "379": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "220": { "file": "banktest.hny", "line": "20", "code": "def withdraw_test(acc, amount):" },
    "49": { "file": "bank.hny", "line": "12", "code": "def withdraw(bank, acct, amount):" },
    "248": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "106": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "389": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "298": { "file": "banktest.hny", "line": "28", "code": "    print(\"done transfer: \", self)" },
    "270": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "216": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "329": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "78": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "152": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "102": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "345": { "file": "banktest.hny", "line": "40", "code": "    amount = choose {1..5}" },
    "156": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "316": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "312": { "file": "banktest.hny", "line": "33", "code": "    spawn inq_test(i)" },
    "68": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "280": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "238": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "173": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "107": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "80": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "157": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "123": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "151": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "335": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "249": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "215": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "183": { "file": "banktest.hny", "line": "16", "code": "    print(\"call deposit: \", self)" },
    "311": { "file": "banktest.hny", "line": "33", "code": "    spawn inq_test(i)" },
    "239": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "213": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "281": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "394": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "347": { "file": "banktest.hny", "line": "41", "code": "    spawn withdraw_test(i, amount)" },
    "313": { "file": "banktest.hny", "line": "33", "code": "    spawn inq_test(i)" },
    "308": { "file": "banktest.hny", "line": "33", "code": "    spawn inq_test(i)" },
    "271": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "34": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "358": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "344": { "file": "banktest.hny", "line": "40", "code": "    amount = choose {1..5}" },
    "337": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "101": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "24": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "19": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "334": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "221": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "90": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "165": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "310": { "file": "banktest.hny", "line": "33", "code": "    spawn inq_test(i)" },
    "212": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "48": { "file": "bank.hny", "line": "12", "code": "def withdraw(bank, acct, amount):" },
    "138": { "file": "bank.hny", "line": "29", "code": "                (!bank)[acctTo].balance += amount" },
    "272": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "282": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "322": { "file": "banktest.hny", "line": "36", "code": "    amount = choose {1..5}" },
    "166": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "148": { "file": "banktest.hny", "line": "10", "code": "def inq_test(acc):" },
    "27": { "file": "bank.hny", "line": "7", "code": "def deposit(bank, acct, amount):" },
    "222": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "198": { "file": "banktest.hny", "line": "17", "code": "    assert bank.inquiry(?b, acc, amount)" },
    "382": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "84": { "file": "bank.hny", "line": "20", "code": "def transfer(bank, acctFrom, acctTo, amount):" },
    "210": { "file": "banktest.hny", "line": "18", "code": "    print(\"done deposit: \", self)" },
    "299": { "file": "banktest.hny", "line": "31", "code": "for i in {1..NINQ}:" },
    "372": { "file": "banktest.hny", "line": "45", "code": "        amount = choose {1..5}" },
    "95": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "37": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "26": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "285": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "223": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "323": { "file": "banktest.hny", "line": "36", "code": "    amount = choose {1..5}" },
    "273": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "373": { "file": "banktest.hny", "line": "45", "code": "        amount = choose {1..5}" },
    "105": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "283": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "383": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "155": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "154": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "94": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "104": { "file": "bank.hny", "line": "25", "code": "            if (!bank)[acctFrom].balance < amount:" },
    "380": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "225": { "file": "banktest.hny", "line": "21", "code": "    print(\"call withdraw: \", self)" },
    "59": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "275": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "284": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "97": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "86": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "36": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "274": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "87": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "31": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "21": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "386": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "393": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "326": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "159": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "250": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "16": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "276": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "176": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "319": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "245": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "144": { "file": "banktest.hny", "line": "8", "code": "b = bank.Bank((max(max(NINQ,NDEP),NWIT),NTRA))" },
    "277": { "file": "banktest.hny", "line": "27", "code": "    assert bank.transfer(?b, acctFrom, acctTo, amount)" },
    "365": { "file": "banktest.hny", "line": "44", "code": "    for j in {1..NTRA}:" },
    "251": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "390": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "381": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "242": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "364": { "file": "banktest.hny", "line": "43", "code": "for i in {1..NTRA}:" },
    "330": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "64": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "332": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "44": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "145": { "file": "banktest.hny", "line": "8", "code": "b = bank.Bank((max(max(NINQ,NDEP),NWIT),NTRA))" },
    "177": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "161": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "392": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "162": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "170": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "333": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "74": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "321": { "file": "banktest.hny", "line": "36", "code": "    amount = choose {1..5}" },
    "243": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "320": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "391": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "367": { "file": "banktest.hny", "line": "44", "code": "    for j in {1..NTRA}:" },
    "33": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "244": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "66": { "file": "bank.hny", "line": "15", "code": "            result = False" },
    "331": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "167": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "76": { "file": "bank.hny", "line": "17", "code": "            (!bank)[acct].balance -= amount" },
    "14": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "160": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "118": { "file": "bank.hny", "line": "28", "code": "                (!bank)[acctFrom].balance -= amount" },
    "23": { "file": "bank.hny", "line": "5", "code": "    atomically result = (!bank)[acct].balance" },
    "149": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "58": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "309": { "file": "banktest.hny", "line": "33", "code": "    spawn inq_test(i)" },
    "247": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "246": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "46": { "file": "bank.hny", "line": "10", "code": "        result = True" },
    "314": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "147": { "file": "banktest.hny", "line": "10", "code": "def inq_test(acc):" },
    "300": { "file": "banktest.hny", "line": "31", "code": "for i in {1..NINQ}:" },
    "336": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "303": { "file": "banktest.hny", "line": "31", "code": "for i in {1..NINQ}:" },
    "93": { "file": "bank.hny", "line": "22", "code": "        result = False" },
    "140": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "241": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "172": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "153": { "file": "banktest.hny", "line": "11", "code": "    print(\"call inquiry: \", self)" },
    "240": { "file": "banktest.hny", "line": "22", "code": "    assert bank.withdraw(?b, acc, amount)" },
    "317": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "388": { "file": "banktest.hny", "line": "46", "code": "        spawn transfer_test(i, j, amount)" },
    "315": { "file": "banktest.hny", "line": "35", "code": "for i in {1..NDEP}:" },
    "171": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "28": { "file": "bank.hny", "line": "7", "code": "def deposit(bank, acct, amount):" },
    "168": { "file": "banktest.hny", "line": "12", "code": "    assert bank.inquiry(?b, acc)" },
    "83": { "file": "bank.hny", "line": "18", "code": "            result = True" },
    "146": { "file": "banktest.hny", "line": "8", "code": "b = bank.Bank((max(max(NINQ,NDEP),NWIT),NTRA))" },
    "328": { "file": "banktest.hny", "line": "37", "code": "    spawn deposit_test(i, amount)" },
    "305": { "file": "banktest.hny", "line": "32", "code": "    amount = choose {1..5}" },
    "88": { "file": "bank.hny", "line": "21", "code": "    if acctFrom == acctTo:" },
    "141": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "302": { "file": "banktest.hny", "line": "31", "code": "for i in {1..NINQ}:" },
    "38": { "file": "bank.hny", "line": "9", "code": "        (!bank)[acct].balance += amount" },
    "257": { "file": "banktest.hny", "line": "25", "code": "def transfer_test(acctFrom, acctTo, amount):" },
    "339": { "file": "banktest.hny", "line": "39", "code": "for i in {1..NINQ}:" },
    "252": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "175": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "253": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "256": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "179": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "54": { "file": "bank.hny", "line": "14", "code": "        if (!bank)[acct].balance < amount:" },
    "98": { "file": "bank.hny", "line": "24", "code": "        atomically:" },
    "174": { "file": "banktest.hny", "line": "13", "code": "    print(\"done inquiry: \", self)" },
    "142": { "file": "bank.hny", "line": "30", "code": "                result = True" },
    "301": { "file": "banktest.hny", "line": "31", "code": "for i in {1..NINQ}:" },
    "255": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "254": { "file": "banktest.hny", "line": "23", "code": "    print(\"done withdraw: \", self)" },
    "306": { "file": "banktest.hny", "line": "32", "code": "    amount = choose {1..5}" }
  }
}

;

var boxSize = 10;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + 29) / 30);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > 30 ? 30 : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "( )"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(obj) {
  if (obj.length == 0) {
    return "None";
  }
  var result = "?" + obj[0].value;
  for (var i = 1; i < obj.length; i++) {
    result += "[" + json_string(obj[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  var name = json_string(obj.name);
  var arg = json_string(obj.arg);
  var pc = json_string(obj.pc);
  return "CTX(" + name + "(" + arg + "):" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
    break;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    return json_string_address(obj.value);
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (k == "result" && obj[k].type == "dict" && obj[k].value.length == 0) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    mcell.innerHTML = trace[i].method;
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    vcell.appendChild(vtext);
  }
  if (failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*30 + x + 1;
  run_microsteps()
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var locs = state.locations;
  while (pc >= 0) {
    s = "" + pc;
    if (locs.hasOwnProperty(s)) {
      return locs[s];
    }
    pc--;
  }
  return noloc;
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var t = microsteps.length;
  if (t > 0 && microsteps[t - 1].tid != mas.tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(mas.tid),
    pc: parseInt(mis.pc),
    invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts
  };

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = misidx == 0 ? "running" : microsteps[t-1].mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else if (misidx == 0) {
    microsteps[t].atomic = 0;
  }
  else {
    microsteps[t].atomic = microsteps[t-1].atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else if (misidx == 0) {
    microsteps[t].readonly = 0;
  }
  else {
    microsteps[t].readonly = microsteps[t-1].readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else if (misidx == 0) {
    microsteps[t].interruptlevel = 0;
  }
  else {
    microsteps[t].interruptlevel = microsteps[t-1].interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else if (misidx == 0) {
    microsteps[t].trace = [];
  }
  else {
    microsteps[t].trace = microsteps[t-1].trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace))
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else if (t == 0) {
    microsteps[t].shared = {};
  }
  else {
    microsteps[t].shared = microsteps[t-1].shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else if (misidx == 0) {
    microsteps[t].fp = 0;
  }
  else {
    microsteps[t].fp = microsteps[t-1].fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = microsteps[t-1].stack.slice(0,
                              microsteps[t-1].stack.length - n);
  }
  else if (misidx == 0) {
    microsteps[t].stack = [];
  }
  else {
    microsteps[t].stack = microsteps[t-1].stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
  // microsteps[t].choose = microsteps[t].stack;
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i])
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print)
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var tid = parseInt(mis.contexts[ctx].tid);
    threads[tid].name = mis.contexts[ctx].name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(mis.contexts[ctx]);
  }
  var mes = megasteps[mis.mesidx];
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

  if (mis.invfails.length > 0) {
    inv = mis.invfails[0];
    code = getCode(inv.pc);
    coderow.style.color = "red";
    coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
    mis.cloc = null;
  }
  else {
    coderow.style.color = "blue";
    coderow.innerHTML = mis.code.file + ":" + mis.code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(mis.code.code);
  }

  currCloc = mis.cloc;
  currOffset = mis.offset;
}

function run_microsteps() {
  coderow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
    currCloc = null;
  }
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = "";
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = microsteps[currentTime == 0 ? 0 : (currentTime-1)].mesidx;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes)
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = microsteps[currentTime == 0 ? 0 : (currentTime-1)].tid;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid)
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  megasteps[i] = {
    canvas: canvas,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

        
</script>
</body>
</html>
